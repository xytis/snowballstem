//! Generated by Snowball 2.0.0 - https://snowballstem.org/

package basque

import (
	snowballRuntime "github.com/blevesearch/snowballstem"
)

var A_0 = []*snowballRuntime.Among{
	{Str: "idea", A: -1, B: 1, F: nil},
	{Str: "bidea", A: 0, B: 1, F: nil},
	{Str: "kidea", A: 0, B: 1, F: nil},
	{Str: "pidea", A: 0, B: 1, F: nil},
	{Str: "kundea", A: -1, B: 1, F: nil},
	{Str: "galea", A: -1, B: 1, F: nil},
	{Str: "tailea", A: -1, B: 1, F: nil},
	{Str: "tzailea", A: -1, B: 1, F: nil},
	{Str: "gunea", A: -1, B: 1, F: nil},
	{Str: "kunea", A: -1, B: 1, F: nil},
	{Str: "tzaga", A: -1, B: 1, F: nil},
	{Str: "gaia", A: -1, B: 1, F: nil},
	{Str: "aldia", A: -1, B: 1, F: nil},
	{Str: "taldia", A: 12, B: 1, F: nil},
	{Str: "karia", A: -1, B: 1, F: nil},
	{Str: "garria", A: -1, B: 2, F: nil},
	{Str: "karria", A: -1, B: 1, F: nil},
	{Str: "ka", A: -1, B: 1, F: nil},
	{Str: "tzaka", A: 17, B: 1, F: nil},
	{Str: "la", A: -1, B: 1, F: nil},
	{Str: "mena", A: -1, B: 1, F: nil},
	{Str: "pena", A: -1, B: 1, F: nil},
	{Str: "kina", A: -1, B: 1, F: nil},
	{Str: "ezina", A: -1, B: 1, F: nil},
	{Str: "tezina", A: 23, B: 1, F: nil},
	{Str: "kuna", A: -1, B: 1, F: nil},
	{Str: "tuna", A: -1, B: 1, F: nil},
	{Str: "kizuna", A: -1, B: 1, F: nil},
	{Str: "era", A: -1, B: 1, F: nil},
	{Str: "bera", A: 28, B: 1, F: nil},
	{Str: "arabera", A: 29, B: 4, F: nil},
	{Str: "kera", A: 28, B: 1, F: nil},
	{Str: "pera", A: 28, B: 1, F: nil},
	{Str: "orra", A: -1, B: 1, F: nil},
	{Str: "korra", A: 33, B: 1, F: nil},
	{Str: "dura", A: -1, B: 1, F: nil},
	{Str: "gura", A: -1, B: 1, F: nil},
	{Str: "kura", A: -1, B: 1, F: nil},
	{Str: "tura", A: -1, B: 1, F: nil},
	{Str: "eta", A: -1, B: 1, F: nil},
	{Str: "keta", A: 39, B: 1, F: nil},
	{Str: "gailua", A: -1, B: 1, F: nil},
	{Str: "eza", A: -1, B: 1, F: nil},
	{Str: "erreza", A: 42, B: 1, F: nil},
	{Str: "tza", A: -1, B: 2, F: nil},
	{Str: "gaitza", A: 44, B: 1, F: nil},
	{Str: "kaitza", A: 44, B: 1, F: nil},
	{Str: "kuntza", A: 44, B: 1, F: nil},
	{Str: "ide", A: -1, B: 1, F: nil},
	{Str: "bide", A: 48, B: 1, F: nil},
	{Str: "kide", A: 48, B: 1, F: nil},
	{Str: "pide", A: 48, B: 1, F: nil},
	{Str: "kunde", A: -1, B: 1, F: nil},
	{Str: "tzake", A: -1, B: 1, F: nil},
	{Str: "tzeke", A: -1, B: 1, F: nil},
	{Str: "le", A: -1, B: 1, F: nil},
	{Str: "gale", A: 55, B: 1, F: nil},
	{Str: "taile", A: 55, B: 1, F: nil},
	{Str: "tzaile", A: 55, B: 1, F: nil},
	{Str: "gune", A: -1, B: 1, F: nil},
	{Str: "kune", A: -1, B: 1, F: nil},
	{Str: "tze", A: -1, B: 1, F: nil},
	{Str: "atze", A: 61, B: 1, F: nil},
	{Str: "gai", A: -1, B: 1, F: nil},
	{Str: "aldi", A: -1, B: 1, F: nil},
	{Str: "taldi", A: 64, B: 1, F: nil},
	{Str: "ki", A: -1, B: 1, F: nil},
	{Str: "ari", A: -1, B: 1, F: nil},
	{Str: "kari", A: 67, B: 1, F: nil},
	{Str: "lari", A: 67, B: 1, F: nil},
	{Str: "tari", A: 67, B: 1, F: nil},
	{Str: "etari", A: 70, B: 1, F: nil},
	{Str: "garri", A: -1, B: 2, F: nil},
	{Str: "karri", A: -1, B: 1, F: nil},
	{Str: "arazi", A: -1, B: 1, F: nil},
	{Str: "tarazi", A: 74, B: 1, F: nil},
	{Str: "an", A: -1, B: 1, F: nil},
	{Str: "ean", A: 76, B: 1, F: nil},
	{Str: "rean", A: 77, B: 1, F: nil},
	{Str: "kan", A: 76, B: 1, F: nil},
	{Str: "etan", A: 76, B: 1, F: nil},
	{Str: "atseden", A: -1, B: 3, F: nil},
	{Str: "men", A: -1, B: 1, F: nil},
	{Str: "pen", A: -1, B: 1, F: nil},
	{Str: "kin", A: -1, B: 1, F: nil},
	{Str: "rekin", A: 84, B: 1, F: nil},
	{Str: "ezin", A: -1, B: 1, F: nil},
	{Str: "tezin", A: 86, B: 1, F: nil},
	{Str: "tun", A: -1, B: 1, F: nil},
	{Str: "kizun", A: -1, B: 1, F: nil},
	{Str: "go", A: -1, B: 1, F: nil},
	{Str: "ago", A: 90, B: 1, F: nil},
	{Str: "tio", A: -1, B: 1, F: nil},
	{Str: "dako", A: -1, B: 1, F: nil},
	{Str: "or", A: -1, B: 1, F: nil},
	{Str: "kor", A: 94, B: 1, F: nil},
	{Str: "tzat", A: -1, B: 1, F: nil},
	{Str: "du", A: -1, B: 1, F: nil},
	{Str: "gailu", A: -1, B: 1, F: nil},
	{Str: "tu", A: -1, B: 1, F: nil},
	{Str: "atu", A: 99, B: 1, F: nil},
	{Str: "aldatu", A: 100, B: 1, F: nil},
	{Str: "tatu", A: 100, B: 1, F: nil},
	{Str: "baditu", A: 99, B: 5, F: nil},
	{Str: "ez", A: -1, B: 1, F: nil},
	{Str: "errez", A: 104, B: 1, F: nil},
	{Str: "tzez", A: 104, B: 1, F: nil},
	{Str: "gaitz", A: -1, B: 1, F: nil},
	{Str: "kaitz", A: -1, B: 1, F: nil},
}

var A_1 = []*snowballRuntime.Among{
	{Str: "ada", A: -1, B: 1, F: nil},
	{Str: "kada", A: 0, B: 1, F: nil},
	{Str: "anda", A: -1, B: 1, F: nil},
	{Str: "denda", A: -1, B: 1, F: nil},
	{Str: "gabea", A: -1, B: 1, F: nil},
	{Str: "kabea", A: -1, B: 1, F: nil},
	{Str: "aldea", A: -1, B: 1, F: nil},
	{Str: "kaldea", A: 6, B: 1, F: nil},
	{Str: "taldea", A: 6, B: 1, F: nil},
	{Str: "ordea", A: -1, B: 1, F: nil},
	{Str: "zalea", A: -1, B: 1, F: nil},
	{Str: "tzalea", A: 10, B: 1, F: nil},
	{Str: "gilea", A: -1, B: 1, F: nil},
	{Str: "emea", A: -1, B: 1, F: nil},
	{Str: "kumea", A: -1, B: 1, F: nil},
	{Str: "nea", A: -1, B: 1, F: nil},
	{Str: "enea", A: 15, B: 1, F: nil},
	{Str: "zionea", A: 15, B: 1, F: nil},
	{Str: "unea", A: 15, B: 1, F: nil},
	{Str: "gunea", A: 18, B: 1, F: nil},
	{Str: "pea", A: -1, B: 1, F: nil},
	{Str: "aurrea", A: -1, B: 1, F: nil},
	{Str: "tea", A: -1, B: 1, F: nil},
	{Str: "kotea", A: 22, B: 1, F: nil},
	{Str: "artea", A: 22, B: 1, F: nil},
	{Str: "ostea", A: 22, B: 1, F: nil},
	{Str: "etxea", A: -1, B: 1, F: nil},
	{Str: "ga", A: -1, B: 1, F: nil},
	{Str: "anga", A: 27, B: 1, F: nil},
	{Str: "gaia", A: -1, B: 1, F: nil},
	{Str: "aldia", A: -1, B: 1, F: nil},
	{Str: "taldia", A: 30, B: 1, F: nil},
	{Str: "handia", A: -1, B: 1, F: nil},
	{Str: "mendia", A: -1, B: 1, F: nil},
	{Str: "geia", A: -1, B: 1, F: nil},
	{Str: "egia", A: -1, B: 1, F: nil},
	{Str: "degia", A: 35, B: 1, F: nil},
	{Str: "tegia", A: 35, B: 1, F: nil},
	{Str: "nahia", A: -1, B: 1, F: nil},
	{Str: "ohia", A: -1, B: 1, F: nil},
	{Str: "kia", A: -1, B: 1, F: nil},
	{Str: "tokia", A: 40, B: 1, F: nil},
	{Str: "oia", A: -1, B: 1, F: nil},
	{Str: "koia", A: 42, B: 1, F: nil},
	{Str: "aria", A: -1, B: 1, F: nil},
	{Str: "karia", A: 44, B: 1, F: nil},
	{Str: "laria", A: 44, B: 1, F: nil},
	{Str: "taria", A: 44, B: 1, F: nil},
	{Str: "eria", A: -1, B: 1, F: nil},
	{Str: "keria", A: 48, B: 1, F: nil},
	{Str: "teria", A: 48, B: 1, F: nil},
	{Str: "garria", A: -1, B: 2, F: nil},
	{Str: "larria", A: -1, B: 1, F: nil},
	{Str: "kirria", A: -1, B: 1, F: nil},
	{Str: "duria", A: -1, B: 1, F: nil},
	{Str: "asia", A: -1, B: 1, F: nil},
	{Str: "tia", A: -1, B: 1, F: nil},
	{Str: "ezia", A: -1, B: 1, F: nil},
	{Str: "bizia", A: -1, B: 1, F: nil},
	{Str: "ontzia", A: -1, B: 1, F: nil},
	{Str: "ka", A: -1, B: 1, F: nil},
	{Str: "joka", A: 60, B: 3, F: nil},
	{Str: "aurka", A: 60, B: 10, F: nil},
	{Str: "ska", A: 60, B: 1, F: nil},
	{Str: "xka", A: 60, B: 1, F: nil},
	{Str: "zka", A: 60, B: 1, F: nil},
	{Str: "gibela", A: -1, B: 1, F: nil},
	{Str: "gela", A: -1, B: 1, F: nil},
	{Str: "kaila", A: -1, B: 1, F: nil},
	{Str: "skila", A: -1, B: 1, F: nil},
	{Str: "tila", A: -1, B: 1, F: nil},
	{Str: "ola", A: -1, B: 1, F: nil},
	{Str: "na", A: -1, B: 1, F: nil},
	{Str: "kana", A: 72, B: 1, F: nil},
	{Str: "ena", A: 72, B: 1, F: nil},
	{Str: "garrena", A: 74, B: 1, F: nil},
	{Str: "gerrena", A: 74, B: 1, F: nil},
	{Str: "urrena", A: 74, B: 1, F: nil},
	{Str: "zaina", A: 72, B: 1, F: nil},
	{Str: "tzaina", A: 78, B: 1, F: nil},
	{Str: "kina", A: 72, B: 1, F: nil},
	{Str: "mina", A: 72, B: 1, F: nil},
	{Str: "garna", A: 72, B: 1, F: nil},
	{Str: "una", A: 72, B: 1, F: nil},
	{Str: "duna", A: 83, B: 1, F: nil},
	{Str: "asuna", A: 83, B: 1, F: nil},
	{Str: "tasuna", A: 85, B: 1, F: nil},
	{Str: "ondoa", A: -1, B: 1, F: nil},
	{Str: "kondoa", A: 87, B: 1, F: nil},
	{Str: "ngoa", A: -1, B: 1, F: nil},
	{Str: "zioa", A: -1, B: 1, F: nil},
	{Str: "koa", A: -1, B: 1, F: nil},
	{Str: "takoa", A: 91, B: 1, F: nil},
	{Str: "zkoa", A: 91, B: 1, F: nil},
	{Str: "noa", A: -1, B: 1, F: nil},
	{Str: "zinoa", A: 94, B: 1, F: nil},
	{Str: "aroa", A: -1, B: 1, F: nil},
	{Str: "taroa", A: 96, B: 1, F: nil},
	{Str: "zaroa", A: 96, B: 1, F: nil},
	{Str: "eroa", A: -1, B: 1, F: nil},
	{Str: "oroa", A: -1, B: 1, F: nil},
	{Str: "osoa", A: -1, B: 1, F: nil},
	{Str: "toa", A: -1, B: 1, F: nil},
	{Str: "ttoa", A: 102, B: 1, F: nil},
	{Str: "ztoa", A: 102, B: 1, F: nil},
	{Str: "txoa", A: -1, B: 1, F: nil},
	{Str: "tzoa", A: -1, B: 1, F: nil},
	{Str: "\u00F1oa", A: -1, B: 1, F: nil},
	{Str: "ra", A: -1, B: 1, F: nil},
	{Str: "ara", A: 108, B: 1, F: nil},
	{Str: "dara", A: 109, B: 1, F: nil},
	{Str: "liara", A: 109, B: 1, F: nil},
	{Str: "tiara", A: 109, B: 1, F: nil},
	{Str: "tara", A: 109, B: 1, F: nil},
	{Str: "etara", A: 113, B: 1, F: nil},
	{Str: "tzara", A: 109, B: 1, F: nil},
	{Str: "bera", A: 108, B: 1, F: nil},
	{Str: "kera", A: 108, B: 1, F: nil},
	{Str: "pera", A: 108, B: 1, F: nil},
	{Str: "ora", A: 108, B: 2, F: nil},
	{Str: "tzarra", A: 108, B: 1, F: nil},
	{Str: "korra", A: 108, B: 1, F: nil},
	{Str: "tra", A: 108, B: 1, F: nil},
	{Str: "sa", A: -1, B: 1, F: nil},
	{Str: "osa", A: 123, B: 1, F: nil},
	{Str: "ta", A: -1, B: 1, F: nil},
	{Str: "eta", A: 125, B: 1, F: nil},
	{Str: "keta", A: 126, B: 1, F: nil},
	{Str: "sta", A: 125, B: 1, F: nil},
	{Str: "dua", A: -1, B: 1, F: nil},
	{Str: "mendua", A: 129, B: 1, F: nil},
	{Str: "ordua", A: 129, B: 1, F: nil},
	{Str: "lekua", A: -1, B: 1, F: nil},
	{Str: "burua", A: -1, B: 1, F: nil},
	{Str: "durua", A: -1, B: 1, F: nil},
	{Str: "tsua", A: -1, B: 1, F: nil},
	{Str: "tua", A: -1, B: 1, F: nil},
	{Str: "mentua", A: 136, B: 1, F: nil},
	{Str: "estua", A: 136, B: 1, F: nil},
	{Str: "txua", A: -1, B: 1, F: nil},
	{Str: "zua", A: -1, B: 1, F: nil},
	{Str: "tzua", A: 140, B: 1, F: nil},
	{Str: "za", A: -1, B: 1, F: nil},
	{Str: "eza", A: 142, B: 1, F: nil},
	{Str: "eroza", A: 142, B: 1, F: nil},
	{Str: "tza", A: 142, B: 2, F: nil},
	{Str: "koitza", A: 145, B: 1, F: nil},
	{Str: "antza", A: 145, B: 1, F: nil},
	{Str: "gintza", A: 145, B: 1, F: nil},
	{Str: "kintza", A: 145, B: 1, F: nil},
	{Str: "kuntza", A: 145, B: 1, F: nil},
	{Str: "gabe", A: -1, B: 1, F: nil},
	{Str: "kabe", A: -1, B: 1, F: nil},
	{Str: "kide", A: -1, B: 1, F: nil},
	{Str: "alde", A: -1, B: 1, F: nil},
	{Str: "kalde", A: 154, B: 1, F: nil},
	{Str: "talde", A: 154, B: 1, F: nil},
	{Str: "orde", A: -1, B: 1, F: nil},
	{Str: "ge", A: -1, B: 1, F: nil},
	{Str: "zale", A: -1, B: 1, F: nil},
	{Str: "tzale", A: 159, B: 1, F: nil},
	{Str: "gile", A: -1, B: 1, F: nil},
	{Str: "eme", A: -1, B: 1, F: nil},
	{Str: "kume", A: -1, B: 1, F: nil},
	{Str: "ne", A: -1, B: 1, F: nil},
	{Str: "zione", A: 164, B: 1, F: nil},
	{Str: "une", A: 164, B: 1, F: nil},
	{Str: "gune", A: 166, B: 1, F: nil},
	{Str: "pe", A: -1, B: 1, F: nil},
	{Str: "aurre", A: -1, B: 1, F: nil},
	{Str: "te", A: -1, B: 1, F: nil},
	{Str: "kote", A: 170, B: 1, F: nil},
	{Str: "arte", A: 170, B: 1, F: nil},
	{Str: "oste", A: 170, B: 1, F: nil},
	{Str: "etxe", A: -1, B: 1, F: nil},
	{Str: "gai", A: -1, B: 1, F: nil},
	{Str: "di", A: -1, B: 1, F: nil},
	{Str: "aldi", A: 176, B: 1, F: nil},
	{Str: "taldi", A: 177, B: 1, F: nil},
	{Str: "geldi", A: 176, B: 8, F: nil},
	{Str: "handi", A: 176, B: 1, F: nil},
	{Str: "mendi", A: 176, B: 1, F: nil},
	{Str: "gei", A: -1, B: 1, F: nil},
	{Str: "egi", A: -1, B: 1, F: nil},
	{Str: "degi", A: 183, B: 1, F: nil},
	{Str: "tegi", A: 183, B: 1, F: nil},
	{Str: "nahi", A: -1, B: 1, F: nil},
	{Str: "ohi", A: -1, B: 1, F: nil},
	{Str: "ki", A: -1, B: 1, F: nil},
	{Str: "toki", A: 188, B: 1, F: nil},
	{Str: "oi", A: -1, B: 1, F: nil},
	{Str: "goi", A: 190, B: 1, F: nil},
	{Str: "koi", A: 190, B: 1, F: nil},
	{Str: "ari", A: -1, B: 1, F: nil},
	{Str: "kari", A: 193, B: 1, F: nil},
	{Str: "lari", A: 193, B: 1, F: nil},
	{Str: "tari", A: 193, B: 1, F: nil},
	{Str: "garri", A: -1, B: 2, F: nil},
	{Str: "larri", A: -1, B: 1, F: nil},
	{Str: "kirri", A: -1, B: 1, F: nil},
	{Str: "duri", A: -1, B: 1, F: nil},
	{Str: "asi", A: -1, B: 1, F: nil},
	{Str: "ti", A: -1, B: 1, F: nil},
	{Str: "ontzi", A: -1, B: 1, F: nil},
	{Str: "\u00F1i", A: -1, B: 1, F: nil},
	{Str: "ak", A: -1, B: 1, F: nil},
	{Str: "ek", A: -1, B: 1, F: nil},
	{Str: "tarik", A: -1, B: 1, F: nil},
	{Str: "gibel", A: -1, B: 1, F: nil},
	{Str: "ail", A: -1, B: 1, F: nil},
	{Str: "kail", A: 209, B: 1, F: nil},
	{Str: "kan", A: -1, B: 1, F: nil},
	{Str: "tan", A: -1, B: 1, F: nil},
	{Str: "etan", A: 212, B: 1, F: nil},
	{Str: "en", A: -1, B: 4, F: nil},
	{Str: "ren", A: 214, B: 2, F: nil},
	{Str: "garren", A: 215, B: 1, F: nil},
	{Str: "gerren", A: 215, B: 1, F: nil},
	{Str: "urren", A: 215, B: 1, F: nil},
	{Str: "ten", A: 214, B: 4, F: nil},
	{Str: "tzen", A: 214, B: 4, F: nil},
	{Str: "zain", A: -1, B: 1, F: nil},
	{Str: "tzain", A: 221, B: 1, F: nil},
	{Str: "kin", A: -1, B: 1, F: nil},
	{Str: "min", A: -1, B: 1, F: nil},
	{Str: "dun", A: -1, B: 1, F: nil},
	{Str: "asun", A: -1, B: 1, F: nil},
	{Str: "tasun", A: 226, B: 1, F: nil},
	{Str: "aizun", A: -1, B: 1, F: nil},
	{Str: "ondo", A: -1, B: 1, F: nil},
	{Str: "kondo", A: 229, B: 1, F: nil},
	{Str: "go", A: -1, B: 1, F: nil},
	{Str: "ngo", A: 231, B: 1, F: nil},
	{Str: "zio", A: -1, B: 1, F: nil},
	{Str: "ko", A: -1, B: 1, F: nil},
	{Str: "trako", A: 234, B: 5, F: nil},
	{Str: "tako", A: 234, B: 1, F: nil},
	{Str: "etako", A: 236, B: 1, F: nil},
	{Str: "eko", A: 234, B: 1, F: nil},
	{Str: "tariko", A: 234, B: 1, F: nil},
	{Str: "sko", A: 234, B: 1, F: nil},
	{Str: "tuko", A: 234, B: 1, F: nil},
	{Str: "minutuko", A: 241, B: 6, F: nil},
	{Str: "zko", A: 234, B: 1, F: nil},
	{Str: "no", A: -1, B: 1, F: nil},
	{Str: "zino", A: 244, B: 1, F: nil},
	{Str: "ro", A: -1, B: 1, F: nil},
	{Str: "aro", A: 246, B: 1, F: nil},
	{Str: "igaro", A: 247, B: 9, F: nil},
	{Str: "taro", A: 247, B: 1, F: nil},
	{Str: "zaro", A: 247, B: 1, F: nil},
	{Str: "ero", A: 246, B: 1, F: nil},
	{Str: "giro", A: 246, B: 1, F: nil},
	{Str: "oro", A: 246, B: 1, F: nil},
	{Str: "oso", A: -1, B: 1, F: nil},
	{Str: "to", A: -1, B: 1, F: nil},
	{Str: "tto", A: 255, B: 1, F: nil},
	{Str: "zto", A: 255, B: 1, F: nil},
	{Str: "txo", A: -1, B: 1, F: nil},
	{Str: "tzo", A: -1, B: 1, F: nil},
	{Str: "gintzo", A: 259, B: 1, F: nil},
	{Str: "\u00F1o", A: -1, B: 1, F: nil},
	{Str: "zp", A: -1, B: 1, F: nil},
	{Str: "ar", A: -1, B: 1, F: nil},
	{Str: "dar", A: 263, B: 1, F: nil},
	{Str: "behar", A: 263, B: 1, F: nil},
	{Str: "zehar", A: 263, B: 7, F: nil},
	{Str: "liar", A: 263, B: 1, F: nil},
	{Str: "tiar", A: 263, B: 1, F: nil},
	{Str: "tar", A: 263, B: 1, F: nil},
	{Str: "tzar", A: 263, B: 1, F: nil},
	{Str: "or", A: -1, B: 2, F: nil},
	{Str: "kor", A: 271, B: 1, F: nil},
	{Str: "os", A: -1, B: 1, F: nil},
	{Str: "ket", A: -1, B: 1, F: nil},
	{Str: "du", A: -1, B: 1, F: nil},
	{Str: "mendu", A: 275, B: 1, F: nil},
	{Str: "ordu", A: 275, B: 1, F: nil},
	{Str: "leku", A: -1, B: 1, F: nil},
	{Str: "buru", A: -1, B: 2, F: nil},
	{Str: "duru", A: -1, B: 1, F: nil},
	{Str: "tsu", A: -1, B: 1, F: nil},
	{Str: "tu", A: -1, B: 1, F: nil},
	{Str: "tatu", A: 282, B: 4, F: nil},
	{Str: "mentu", A: 282, B: 1, F: nil},
	{Str: "estu", A: 282, B: 1, F: nil},
	{Str: "txu", A: -1, B: 1, F: nil},
	{Str: "zu", A: -1, B: 1, F: nil},
	{Str: "tzu", A: 287, B: 1, F: nil},
	{Str: "gintzu", A: 288, B: 1, F: nil},
	{Str: "z", A: -1, B: 1, F: nil},
	{Str: "ez", A: 290, B: 1, F: nil},
	{Str: "eroz", A: 290, B: 1, F: nil},
	{Str: "tz", A: 290, B: 1, F: nil},
	{Str: "koitz", A: 293, B: 1, F: nil},
}

var A_2 = []*snowballRuntime.Among{
	{Str: "zlea", A: -1, B: 2, F: nil},
	{Str: "keria", A: -1, B: 1, F: nil},
	{Str: "la", A: -1, B: 1, F: nil},
	{Str: "era", A: -1, B: 1, F: nil},
	{Str: "dade", A: -1, B: 1, F: nil},
	{Str: "tade", A: -1, B: 1, F: nil},
	{Str: "date", A: -1, B: 1, F: nil},
	{Str: "tate", A: -1, B: 1, F: nil},
	{Str: "gi", A: -1, B: 1, F: nil},
	{Str: "ki", A: -1, B: 1, F: nil},
	{Str: "ik", A: -1, B: 1, F: nil},
	{Str: "lanik", A: 10, B: 1, F: nil},
	{Str: "rik", A: 10, B: 1, F: nil},
	{Str: "larik", A: 12, B: 1, F: nil},
	{Str: "ztik", A: 10, B: 1, F: nil},
	{Str: "go", A: -1, B: 1, F: nil},
	{Str: "ro", A: -1, B: 1, F: nil},
	{Str: "ero", A: 16, B: 1, F: nil},
	{Str: "to", A: -1, B: 1, F: nil},
}

var G_v = []byte{17, 65, 16}

type Context struct {
	i_p2 int
	i_p1 int
	i_pV int
}

func r_mark_regions(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	context.i_pV = env.Limit
	context.i_p1 = env.Limit
	context.i_p2 = env.Limit
	var v_1 = env.Cursor
lab0:
	for {
	lab1:
		for {
			var v_2 = env.Cursor
		lab2:
			for {
				if !env.InGrouping(G_v, 97, 117) {
					break lab2
				}
			lab3:
				for {
					var v_3 = env.Cursor
				lab4:
					for {
						if !env.OutGrouping(G_v, 97, 117) {
							break lab4
						}
					golab5:
						for {
						lab6:
							for {
								if !env.InGrouping(G_v, 97, 117) {
									break lab6
								}
								break golab5
							}
							if env.Cursor >= env.Limit {
								break lab4
							}
							env.NextChar()
						}
						break lab3
					}
					env.Cursor = v_3
					if !env.InGrouping(G_v, 97, 117) {
						break lab2
					}
				golab7:
					for {
					lab8:
						for {
							if !env.OutGrouping(G_v, 97, 117) {
								break lab8
							}
							break golab7
						}
						if env.Cursor >= env.Limit {
							break lab2
						}
						env.NextChar()
					}
					break lab3
				}
				break lab1
			}
			env.Cursor = v_2
			if !env.OutGrouping(G_v, 97, 117) {
				break lab0
			}
		lab9:
			for {
				var v_6 = env.Cursor
			lab10:
				for {
					if !env.OutGrouping(G_v, 97, 117) {
						break lab10
					}
				golab11:
					for {
					lab12:
						for {
							if !env.InGrouping(G_v, 97, 117) {
								break lab12
							}
							break golab11
						}
						if env.Cursor >= env.Limit {
							break lab10
						}
						env.NextChar()
					}
					break lab9
				}
				env.Cursor = v_6
				if !env.InGrouping(G_v, 97, 117) {
					break lab0
				}
				if env.Cursor >= env.Limit {
					break lab0
				}
				env.NextChar()
				break lab9
			}
			break lab1
		}
		context.i_pV = env.Cursor
		break lab0
	}
	env.Cursor = v_1
	var v_8 = env.Cursor
lab13:
	for {
	golab14:
		for {
		lab15:
			for {
				if !env.InGrouping(G_v, 97, 117) {
					break lab15
				}
				break golab14
			}
			if env.Cursor >= env.Limit {
				break lab13
			}
			env.NextChar()
		}
	golab16:
		for {
		lab17:
			for {
				if !env.OutGrouping(G_v, 97, 117) {
					break lab17
				}
				break golab16
			}
			if env.Cursor >= env.Limit {
				break lab13
			}
			env.NextChar()
		}
		context.i_p1 = env.Cursor
	golab18:
		for {
		lab19:
			for {
				if !env.InGrouping(G_v, 97, 117) {
					break lab19
				}
				break golab18
			}
			if env.Cursor >= env.Limit {
				break lab13
			}
			env.NextChar()
		}
	golab20:
		for {
		lab21:
			for {
				if !env.OutGrouping(G_v, 97, 117) {
					break lab21
				}
				break golab20
			}
			if env.Cursor >= env.Limit {
				break lab13
			}
			env.NextChar()
		}
		context.i_p2 = env.Cursor
		break lab13
	}
	env.Cursor = v_8
	return true
}

func r_RV(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !(context.i_pV <= env.Cursor) {
		return false
	}
	return true
}

func r_R2(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !(context.i_p2 <= env.Cursor) {
		return false
	}
	return true
}

func r_R1(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !(context.i_p1 <= env.Cursor) {
		return false
	}
	return true
}

func r_aditzak(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Ket = env.Cursor
	among_var = env.FindAmongB(A_0, context)
	if among_var == 0 {
		return false
	}
	env.Bra = env.Cursor
	if among_var == 1 {
		if !r_RV(env, context) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 2 {
		if !r_R2(env, context) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 3 {
		if !env.SliceFrom("atseden") {
			return false
		}
	} else if among_var == 4 {
		if !env.SliceFrom("arabera") {
			return false
		}
	} else if among_var == 5 {
		if !env.SliceFrom("baditu") {
			return false
		}
	}
	return true
}

func r_izenak(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Ket = env.Cursor
	among_var = env.FindAmongB(A_1, context)
	if among_var == 0 {
		return false
	}
	env.Bra = env.Cursor
	if among_var == 1 {
		if !r_RV(env, context) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 2 {
		if !r_R2(env, context) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 3 {
		if !env.SliceFrom("jok") {
			return false
		}
	} else if among_var == 4 {
		if !r_R1(env, context) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 5 {
		if !env.SliceFrom("tra") {
			return false
		}
	} else if among_var == 6 {
		if !env.SliceFrom("minutu") {
			return false
		}
	} else if among_var == 7 {
		if !env.SliceFrom("zehar") {
			return false
		}
	} else if among_var == 8 {
		if !env.SliceFrom("geldi") {
			return false
		}
	} else if among_var == 9 {
		if !env.SliceFrom("igaro") {
			return false
		}
	} else if among_var == 10 {
		if !env.SliceFrom("aurka") {
			return false
		}
	}
	return true
}

func r_adjetiboak(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Ket = env.Cursor
	among_var = env.FindAmongB(A_2, context)
	if among_var == 0 {
		return false
	}
	env.Bra = env.Cursor
	if among_var == 1 {
		if !r_RV(env, context) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 2 {
		if !env.SliceFrom("z") {
			return false
		}
	}
	return true
}

func Stem(env *snowballRuntime.Env) bool {
	var context = &Context{
		i_p2: 0,
		i_p1: 0,
		i_pV: 0,
	}
	_ = context
	r_mark_regions(env, context)
	env.LimitBackward = env.Cursor
	env.Cursor = env.Limit
replab0:
	for {
		var v_2 = env.Limit - env.Cursor
	lab1:
		for range [2]struct{}{} {
			if !r_aditzak(env, context) {
				break lab1
			}
			continue replab0
		}
		env.Cursor = env.Limit - v_2
		break replab0
	}
replab2:
	for {
		var v_3 = env.Limit - env.Cursor
	lab3:
		for range [2]struct{}{} {
			if !r_izenak(env, context) {
				break lab3
			}
			continue replab2
		}
		env.Cursor = env.Limit - v_3
		break replab2
	}
	var v_4 = env.Limit - env.Cursor
	r_adjetiboak(env, context)
	env.Cursor = env.Limit - v_4
	env.Cursor = env.LimitBackward
	return true
}
