//! Generated by Snowball 2.0.0 - https://snowballstem.org/

package tamil

import (
	snowballRuntime "github.com/blevesearch/snowballstem"
)

var A_0 = []*snowballRuntime.Among{
	{Str: "\u0B95", A: -1, B: -1, F: nil},
	{Str: "\u0B99", A: -1, B: -1, F: nil},
	{Str: "\u0B9A", A: -1, B: -1, F: nil},
	{Str: "\u0B9E", A: -1, B: -1, F: nil},
	{Str: "\u0BA4", A: -1, B: -1, F: nil},
	{Str: "\u0BA8", A: -1, B: -1, F: nil},
	{Str: "\u0BAA", A: -1, B: -1, F: nil},
	{Str: "\u0BAE", A: -1, B: -1, F: nil},
	{Str: "\u0BAF", A: -1, B: -1, F: nil},
	{Str: "\u0BB5", A: -1, B: -1, F: nil},
}

var A_1 = []*snowballRuntime.Among{
	{Str: "\u0BA8\u0BCD\u0BA4\u0BCD", A: -1, B: -1, F: nil},
	{Str: "\u0BA8\u0BCD", A: -1, B: -1, F: nil},
	{Str: "\u0BA8\u0BCD\u0BA4", A: -1, B: -1, F: nil},
}

var A_2 = []*snowballRuntime.Among{
	{Str: "\u0BC0", A: -1, B: -1, F: nil},
	{Str: "\u0BC8", A: -1, B: -1, F: nil},
	{Str: "\u0BBF", A: -1, B: -1, F: nil},
}

var A_3 = []*snowballRuntime.Among{
	{Str: "\u0B95", A: -1, B: -1, F: nil},
	{Str: "\u0B9A", A: -1, B: -1, F: nil},
	{Str: "\u0B9F", A: -1, B: -1, F: nil},
	{Str: "\u0BA4", A: -1, B: -1, F: nil},
	{Str: "\u0BAA", A: -1, B: -1, F: nil},
	{Str: "\u0BB1", A: -1, B: -1, F: nil},
}

var A_4 = []*snowballRuntime.Among{
	{Str: "\u0B95", A: -1, B: -1, F: nil},
	{Str: "\u0B9A", A: -1, B: -1, F: nil},
	{Str: "\u0B9F", A: -1, B: -1, F: nil},
	{Str: "\u0BA4", A: -1, B: -1, F: nil},
	{Str: "\u0BAA", A: -1, B: -1, F: nil},
	{Str: "\u0BB1", A: -1, B: -1, F: nil},
}

var A_5 = []*snowballRuntime.Among{
	{Str: "\u0B95", A: -1, B: -1, F: nil},
	{Str: "\u0B9A", A: -1, B: -1, F: nil},
	{Str: "\u0B9F", A: -1, B: -1, F: nil},
	{Str: "\u0BA4", A: -1, B: -1, F: nil},
	{Str: "\u0BAA", A: -1, B: -1, F: nil},
	{Str: "\u0BB1", A: -1, B: -1, F: nil},
}

var A_6 = []*snowballRuntime.Among{
	{Str: "\u0BAF", A: -1, B: -1, F: nil},
	{Str: "\u0BB0", A: -1, B: -1, F: nil},
	{Str: "\u0BB2", A: -1, B: -1, F: nil},
	{Str: "\u0BB3", A: -1, B: -1, F: nil},
	{Str: "\u0BB4", A: -1, B: -1, F: nil},
	{Str: "\u0BB5", A: -1, B: -1, F: nil},
}

var A_7 = []*snowballRuntime.Among{
	{Str: "\u0B99", A: -1, B: -1, F: nil},
	{Str: "\u0B9E", A: -1, B: -1, F: nil},
	{Str: "\u0BA3", A: -1, B: -1, F: nil},
	{Str: "\u0BA8", A: -1, B: -1, F: nil},
	{Str: "\u0BA9", A: -1, B: -1, F: nil},
	{Str: "\u0BAE", A: -1, B: -1, F: nil},
}

var A_8 = []*snowballRuntime.Among{
	{Str: "\u0BB5\u0BCD", A: -1, B: -1, F: nil},
	{Str: "\u0BAF", A: -1, B: -1, F: nil},
	{Str: "\u0BB5", A: -1, B: -1, F: nil},
}

var A_9 = []*snowballRuntime.Among{
	{Str: "\u0BC0", A: -1, B: -1, F: nil},
	{Str: "\u0BC1", A: -1, B: -1, F: nil},
	{Str: "\u0BC2", A: -1, B: -1, F: nil},
	{Str: "\u0BC6", A: -1, B: -1, F: nil},
	{Str: "\u0BC7", A: -1, B: -1, F: nil},
	{Str: "\u0BC8", A: -1, B: -1, F: nil},
	{Str: "\u0BBE", A: -1, B: -1, F: nil},
	{Str: "\u0BBF", A: -1, B: -1, F: nil},
}

var A_10 = []*snowballRuntime.Among{
	{Str: "\u0BC0", A: -1, B: -1, F: nil},
	{Str: "\u0BC1", A: -1, B: -1, F: nil},
	{Str: "\u0BC2", A: -1, B: -1, F: nil},
	{Str: "\u0BC6", A: -1, B: -1, F: nil},
	{Str: "\u0BC7", A: -1, B: -1, F: nil},
	{Str: "\u0BC8", A: -1, B: -1, F: nil},
	{Str: "\u0BBE", A: -1, B: -1, F: nil},
	{Str: "\u0BBF", A: -1, B: -1, F: nil},
}

var A_11 = []*snowballRuntime.Among{
	{Str: "\u0B85", A: -1, B: -1, F: nil},
	{Str: "\u0B87", A: -1, B: -1, F: nil},
	{Str: "\u0B89", A: -1, B: -1, F: nil},
}

var A_12 = []*snowballRuntime.Among{
	{Str: "\u0B95", A: -1, B: -1, F: nil},
	{Str: "\u0B99", A: -1, B: -1, F: nil},
	{Str: "\u0B9A", A: -1, B: -1, F: nil},
	{Str: "\u0B9E", A: -1, B: -1, F: nil},
	{Str: "\u0BA4", A: -1, B: -1, F: nil},
	{Str: "\u0BA8", A: -1, B: -1, F: nil},
	{Str: "\u0BAA", A: -1, B: -1, F: nil},
	{Str: "\u0BAE", A: -1, B: -1, F: nil},
	{Str: "\u0BAF", A: -1, B: -1, F: nil},
	{Str: "\u0BB5", A: -1, B: -1, F: nil},
}

var A_13 = []*snowballRuntime.Among{
	{Str: "\u0B95", A: -1, B: -1, F: nil},
	{Str: "\u0B9A", A: -1, B: -1, F: nil},
	{Str: "\u0B9F", A: -1, B: -1, F: nil},
	{Str: "\u0BA4", A: -1, B: -1, F: nil},
	{Str: "\u0BAA", A: -1, B: -1, F: nil},
	{Str: "\u0BB1", A: -1, B: -1, F: nil},
}

var A_14 = []*snowballRuntime.Among{
	{Str: "\u0BC7", A: -1, B: -1, F: nil},
	{Str: "\u0BCB", A: -1, B: -1, F: nil},
	{Str: "\u0BBE", A: -1, B: -1, F: nil},
}

var A_15 = []*snowballRuntime.Among{
	{Str: "\u0BAA\u0BBF", A: -1, B: -1, F: nil},
	{Str: "\u0BB5\u0BBF", A: -1, B: -1, F: nil},
}

var A_16 = []*snowballRuntime.Among{
	{Str: "\u0BC0", A: -1, B: -1, F: nil},
	{Str: "\u0BC1", A: -1, B: -1, F: nil},
	{Str: "\u0BC2", A: -1, B: -1, F: nil},
	{Str: "\u0BC6", A: -1, B: -1, F: nil},
	{Str: "\u0BC7", A: -1, B: -1, F: nil},
	{Str: "\u0BC8", A: -1, B: -1, F: nil},
	{Str: "\u0BBE", A: -1, B: -1, F: nil},
	{Str: "\u0BBF", A: -1, B: -1, F: nil},
}

var A_17 = []*snowballRuntime.Among{
	{Str: "\u0BAA\u0B9F\u0BCD\u0B9F\u0BC1", A: -1, B: -1, F: nil},
	{Str: "\u0BB5\u0BBF\u0B9F\u0BCD\u0B9F\u0BC1", A: -1, B: -1, F: nil},
	{Str: "\u0BAA\u0B9F\u0BC1", A: -1, B: -1, F: nil},
	{Str: "\u0BB5\u0BBF\u0B9F\u0BC1", A: -1, B: -1, F: nil},
	{Str: "\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1", A: -1, B: -1, F: nil},
	{Str: "\u0BC6\u0BB2\u0BCD\u0BB2\u0BBE\u0BAE\u0BCD", A: -1, B: -1, F: nil},
	{Str: "\u0BAA\u0B9F\u0BCD\u0B9F", A: -1, B: -1, F: nil},
	{Str: "\u0BAA\u0B9F\u0BCD\u0B9F\u0BA3", A: -1, B: -1, F: nil},
	{Str: "\u0BA4\u0BBE\u0BA9", A: -1, B: -1, F: nil},
	{Str: "\u0BAA\u0B9F\u0BBF\u0BA4\u0BBE\u0BA9", A: 8, B: -1, F: nil},
	{Str: "\u0B95\u0BC1\u0BB0\u0BBF\u0BAF", A: -1, B: -1, F: nil},
	{Str: "\u0BAA\u0B9F\u0BBF", A: -1, B: -1, F: nil},
	{Str: "\u0BAA\u0BB1\u0BCD\u0BB1\u0BBF", A: -1, B: -1, F: nil},
}

var A_18 = []*snowballRuntime.Among{
	{Str: "\u0B95", A: -1, B: -1, F: nil},
	{Str: "\u0B9A", A: -1, B: -1, F: nil},
	{Str: "\u0B9F", A: -1, B: -1, F: nil},
	{Str: "\u0BA4", A: -1, B: -1, F: nil},
	{Str: "\u0BAA", A: -1, B: -1, F: nil},
	{Str: "\u0BB1", A: -1, B: -1, F: nil},
}

var A_19 = []*snowballRuntime.Among{
	{Str: "\u0B95", A: -1, B: -1, F: nil},
	{Str: "\u0B9A", A: -1, B: -1, F: nil},
	{Str: "\u0B9F", A: -1, B: -1, F: nil},
	{Str: "\u0BA4", A: -1, B: -1, F: nil},
	{Str: "\u0BAA", A: -1, B: -1, F: nil},
	{Str: "\u0BB1", A: -1, B: -1, F: nil},
}

var A_20 = []*snowballRuntime.Among{
	{Str: "\u0BC0", A: -1, B: -1, F: nil},
	{Str: "\u0BC1", A: -1, B: -1, F: nil},
	{Str: "\u0BC2", A: -1, B: -1, F: nil},
	{Str: "\u0BC6", A: -1, B: -1, F: nil},
	{Str: "\u0BC7", A: -1, B: -1, F: nil},
	{Str: "\u0BC8", A: -1, B: -1, F: nil},
	{Str: "\u0BBE", A: -1, B: -1, F: nil},
	{Str: "\u0BBF", A: -1, B: -1, F: nil},
}

var A_21 = []*snowballRuntime.Among{
	{Str: "\u0BC0", A: -1, B: -1, F: nil},
	{Str: "\u0BC1", A: -1, B: -1, F: nil},
	{Str: "\u0BC2", A: -1, B: -1, F: nil},
	{Str: "\u0BC6", A: -1, B: -1, F: nil},
	{Str: "\u0BC7", A: -1, B: -1, F: nil},
	{Str: "\u0BC8", A: -1, B: -1, F: nil},
	{Str: "\u0BBE", A: -1, B: -1, F: nil},
	{Str: "\u0BBF", A: -1, B: -1, F: nil},
}

var A_22 = []*snowballRuntime.Among{
	{Str: "\u0BAA\u0B9F\u0BC1", A: -1, B: -1, F: nil},
	{Str: "\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BCD", A: -1, B: -1, F: nil},
}

var A_23 = []*snowballRuntime.Among{
	{Str: "\u0B85", A: -1, B: -1, F: nil},
	{Str: "\u0B86", A: -1, B: -1, F: nil},
	{Str: "\u0B87", A: -1, B: -1, F: nil},
	{Str: "\u0B88", A: -1, B: -1, F: nil},
	{Str: "\u0B89", A: -1, B: -1, F: nil},
	{Str: "\u0B8A", A: -1, B: -1, F: nil},
	{Str: "\u0B8E", A: -1, B: -1, F: nil},
	{Str: "\u0B8F", A: -1, B: -1, F: nil},
	{Str: "\u0B90", A: -1, B: -1, F: nil},
	{Str: "\u0B92", A: -1, B: -1, F: nil},
	{Str: "\u0B93", A: -1, B: -1, F: nil},
	{Str: "\u0B94", A: -1, B: -1, F: nil},
}

var A_24 = []*snowballRuntime.Among{
	{Str: "\u0BC0", A: -1, B: -1, F: nil},
	{Str: "\u0BC1", A: -1, B: -1, F: nil},
	{Str: "\u0BC2", A: -1, B: -1, F: nil},
	{Str: "\u0BC6", A: -1, B: -1, F: nil},
	{Str: "\u0BC7", A: -1, B: -1, F: nil},
	{Str: "\u0BC8", A: -1, B: -1, F: nil},
	{Str: "\u0BBE", A: -1, B: -1, F: nil},
	{Str: "\u0BBF", A: -1, B: -1, F: nil},
}

var A_25 = []*snowballRuntime.Among{
	{Str: "\u0B95\u0BBF\u0BA9\u0BCD\u0BB1\u0BCD", A: -1, B: -1, F: nil},
	{Str: "\u0BBE\u0BA8\u0BBF\u0BA9\u0BCD\u0BB1\u0BCD", A: -1, B: -1, F: nil},
	{Str: "\u0B95\u0BBF\u0BB1\u0BCD", A: -1, B: -1, F: nil},
	{Str: "\u0B95\u0BBF\u0BA9\u0BCD\u0BB1", A: -1, B: -1, F: nil},
	{Str: "\u0BBE\u0BA8\u0BBF\u0BA9\u0BCD\u0BB1", A: -1, B: -1, F: nil},
	{Str: "\u0B95\u0BBF\u0BB1", A: -1, B: -1, F: nil},
}

type Context struct {
	b_found_vetrumai_urupu bool
	b_found_a_match        bool
}

func r_has_min_length(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !(snowballRuntime.RuneCountInString(env.Current()) > 4) {
		return false
	}
	return true
}

func r_fix_va_start(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
lab0:
	for {
		var v_1 = env.Cursor
	lab1:
		for {
			var v_2 = env.Cursor
			var v_3 = env.Cursor
		lab2:
			for {
				if !env.EqS("\u0BB5\u0BCB") {
					env.Cursor = v_3
					break lab2
				}
				break lab2
			}
			env.Cursor = v_2
			env.Bra = env.Cursor
			if !env.EqS("\u0BB5\u0BCB") {
				break lab1
			}
			env.Ket = env.Cursor
			if !env.SliceFrom("\u0B93") {
				return false
			}
			break lab0
		}
		env.Cursor = v_1
	lab3:
		for {
			var v_4 = env.Cursor
			var v_5 = env.Cursor
		lab4:
			for {
				if !env.EqS("\u0BB5\u0BCA") {
					env.Cursor = v_5
					break lab4
				}
				break lab4
			}
			env.Cursor = v_4
			env.Bra = env.Cursor
			if !env.EqS("\u0BB5\u0BCA") {
				break lab3
			}
			env.Ket = env.Cursor
			if !env.SliceFrom("\u0B92") {
				return false
			}
			break lab0
		}
		env.Cursor = v_1
	lab5:
		for {
			var v_6 = env.Cursor
			var v_7 = env.Cursor
		lab6:
			for {
				if !env.EqS("\u0BB5\u0BC1") {
					env.Cursor = v_7
					break lab6
				}
				break lab6
			}
			env.Cursor = v_6
			env.Bra = env.Cursor
			if !env.EqS("\u0BB5\u0BC1") {
				break lab5
			}
			env.Ket = env.Cursor
			if !env.SliceFrom("\u0B89") {
				return false
			}
			break lab0
		}
		env.Cursor = v_1
		var v_8 = env.Cursor
		var v_9 = env.Cursor
	lab7:
		for {
			if !env.EqS("\u0BB5\u0BC2") {
				env.Cursor = v_9
				break lab7
			}
			break lab7
		}
		env.Cursor = v_8
		env.Bra = env.Cursor
		if !env.EqS("\u0BB5\u0BC2") {
			return false
		}
		env.Ket = env.Cursor
		if !env.SliceFrom("\u0B8A") {
			return false
		}
		break lab0
	}
	return true
}

func r_fix_endings(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var v_1 = env.Cursor
lab0:
	for {
	replab1:
		for {
			var v_2 = env.Cursor
		lab2:
			for range [2]struct{}{} {
				if !r_fix_ending(env, context) {
					break lab2
				}
				continue replab1
			}
			env.Cursor = v_2
			break replab1
		}
		break lab0
	}
	env.Cursor = v_1
	return true
}

func r_remove_question_prefixes(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	env.Bra = env.Cursor
	if !env.EqS("\u0B8E") {
		return false
	}
	if env.FindAmong(A_0, context) == 0 {
		return false
	}
	if !env.EqS("\u0BCD") {
		return false
	}
	env.Ket = env.Cursor
	if !env.SliceDel() {
		return false
	}
	var v_1 = env.Cursor
	r_fix_va_start(env, context)
	env.Cursor = v_1
	return true
}

func r_fix_ending(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !(snowballRuntime.RuneCountInString(env.Current()) > 3) {
		return false
	}
	env.LimitBackward = env.Cursor
	env.Cursor = env.Limit
lab0:
	for {
		var v_1 = env.Limit - env.Cursor
	lab1:
		for {
			env.Ket = env.Cursor
			if env.FindAmongB(A_1, context) == 0 {
				break lab1
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab2:
		for {
			env.Ket = env.Cursor
			if !env.EqSB("\u0BAF\u0BCD") {
				break lab2
			}
			var v_2 = env.Limit - env.Cursor
			if env.FindAmongB(A_2, context) == 0 {
				break lab2
			}
			env.Cursor = env.Limit - v_2
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab3:
		for {
			env.Ket = env.Cursor
		lab4:
			for {
				var v_3 = env.Limit - env.Cursor
			lab5:
				for {
					if !env.EqSB("\u0B9F\u0BCD\u0BAA\u0BCD") {
						break lab5
					}
					break lab4
				}
				env.Cursor = env.Limit - v_3
				if !env.EqSB("\u0B9F\u0BCD\u0B95\u0BCD") {
					break lab3
				}
				break lab4
			}
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0BB3\u0BCD") {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab6:
		for {
			env.Ket = env.Cursor
			if !env.EqSB("\u0BA9\u0BCD\u0BB1\u0BCD") {
				break lab6
			}
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0BB2\u0BCD") {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab7:
		for {
			env.Ket = env.Cursor
			if !env.EqSB("\u0BB1\u0BCD\u0B95\u0BCD") {
				break lab7
			}
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0BB2\u0BCD") {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab8:
		for {
			env.Ket = env.Cursor
			if !env.EqSB("\u0B9F\u0BCD\u0B9F\u0BCD") {
				break lab8
			}
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0B9F\u0BC1") {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab9:
		for {
			if !context.b_found_vetrumai_urupu {
				break lab9
			}
			env.Ket = env.Cursor
			if !env.EqSB("\u0BA4\u0BCD\u0BA4\u0BCD") {
				break lab9
			}
			var v_4 = env.Limit - env.Cursor
			var v_5 = env.Limit - env.Cursor
		lab10:
			for {
				if !env.EqSB("\u0BC8") {
					break lab10
				}
				break lab9
			}
			env.Cursor = env.Limit - v_5
			env.Cursor = env.Limit - v_4
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0BAE\u0BCD") {
				return false
			}
			env.Bra = env.Cursor
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab11:
		for {
			env.Ket = env.Cursor
		lab12:
			for {
				var v_6 = env.Limit - env.Cursor
			lab13:
				for {
					if !env.EqSB("\u0BC1\u0B95\u0BCD") {
						break lab13
					}
					break lab12
				}
				env.Cursor = env.Limit - v_6
				if !env.EqSB("\u0BC1\u0B95\u0BCD\u0B95\u0BCD") {
					break lab11
				}
				break lab12
			}
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0BCD") {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab14:
		for {
			env.Ket = env.Cursor
			if !env.EqSB("\u0BCD") {
				break lab14
			}
			if env.FindAmongB(A_3, context) == 0 {
				break lab14
			}
			if !env.EqSB("\u0BCD") {
				break lab14
			}
			if env.FindAmongB(A_4, context) == 0 {
				break lab14
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab15:
		for {
			env.Ket = env.Cursor
			if !env.EqSB("\u0BC1\u0B95\u0BCD") {
				break lab15
			}
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0BCD") {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab16:
		for {
			env.Ket = env.Cursor
			if !env.EqSB("\u0BCD") {
				break lab16
			}
			if env.FindAmongB(A_5, context) == 0 {
				break lab16
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab17:
		for {
			env.Ket = env.Cursor
			if !env.EqSB("\u0BCD") {
				break lab17
			}
		lab18:
			for {
				var v_7 = env.Limit - env.Cursor
			lab19:
				for {
					if env.FindAmongB(A_6, context) == 0 {
						break lab19
					}
					break lab18
				}
				env.Cursor = env.Limit - v_7
				if env.FindAmongB(A_7, context) == 0 {
					break lab17
				}
				break lab18
			}
			if !env.EqSB("\u0BCD") {
				break lab17
			}
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0BCD") {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab20:
		for {
			env.Ket = env.Cursor
			if env.FindAmongB(A_8, context) == 0 {
				break lab20
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab21:
		for {
			env.Ket = env.Cursor
			if !env.EqSB("\u0BA9\u0BC1") {
				break lab21
			}
			var v_8 = env.Limit - env.Cursor
			var v_9 = env.Limit - env.Cursor
		lab22:
			for {
				if env.FindAmongB(A_9, context) == 0 {
					break lab22
				}
				break lab21
			}
			env.Cursor = env.Limit - v_9
			env.Cursor = env.Limit - v_8
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab23:
		for {
			env.Ket = env.Cursor
			if !env.EqSB("\u0B99\u0BCD") {
				break lab23
			}
			var v_10 = env.Limit - env.Cursor
			var v_11 = env.Limit - env.Cursor
		lab24:
			for {
				if !env.EqSB("\u0BC8") {
					break lab24
				}
				break lab23
			}
			env.Cursor = env.Limit - v_11
			env.Cursor = env.Limit - v_10
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0BAE\u0BCD") {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab25:
		for {
			env.Ket = env.Cursor
			if !env.EqSB("\u0B99\u0BCD") {
				break lab25
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
		env.Ket = env.Cursor
		if !env.EqSB("\u0BCD") {
			return false
		}
		var v_12 = env.Limit - env.Cursor
	lab26:
		for {
			var v_13 = env.Limit - env.Cursor
		lab27:
			for {
				if env.FindAmongB(A_10, context) == 0 {
					break lab27
				}
				break lab26
			}
			env.Cursor = env.Limit - v_13
			if !env.EqSB("\u0BCD") {
				return false
			}
			break lab26
		}
		env.Cursor = env.Limit - v_12
		env.Bra = env.Cursor
		if !env.SliceDel() {
			return false
		}
		break lab0
	}
	env.Cursor = env.LimitBackward
	return true
}

func r_remove_pronoun_prefixes(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	context.b_found_a_match = false
	env.Bra = env.Cursor
	if env.FindAmong(A_11, context) == 0 {
		return false
	}
	if env.FindAmong(A_12, context) == 0 {
		return false
	}
	if !env.EqS("\u0BCD") {
		return false
	}
	env.Ket = env.Cursor
	if !env.SliceDel() {
		return false
	}
	context.b_found_a_match = true
	var v_1 = env.Cursor
	r_fix_va_start(env, context)
	env.Cursor = v_1
	return true
}

func r_remove_plural_suffix(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	context.b_found_a_match = false
	env.LimitBackward = env.Cursor
	env.Cursor = env.Limit
lab0:
	for {
		var v_1 = env.Limit - env.Cursor
	lab1:
		for {
			env.Ket = env.Cursor
			if !env.EqSB("\u0BC1\u0B99\u0BCD\u0B95\u0BB3\u0BCD") {
				break lab1
			}
			var v_2 = env.Limit - env.Cursor
			var v_3 = env.Limit - env.Cursor
		lab2:
			for {
				if env.FindAmongB(A_13, context) == 0 {
					break lab2
				}
				break lab1
			}
			env.Cursor = env.Limit - v_3
			env.Cursor = env.Limit - v_2
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0BCD") {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab3:
		for {
			env.Ket = env.Cursor
			if !env.EqSB("\u0BB1\u0BCD\u0B95\u0BB3\u0BCD") {
				break lab3
			}
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0BB2\u0BCD") {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab4:
		for {
			env.Ket = env.Cursor
			if !env.EqSB("\u0B9F\u0BCD\u0B95\u0BB3\u0BCD") {
				break lab4
			}
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0BB3\u0BCD") {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
		env.Ket = env.Cursor
		if !env.EqSB("\u0B95\u0BB3\u0BCD") {
			return false
		}
		env.Bra = env.Cursor
		if !env.SliceDel() {
			return false
		}
		break lab0
	}
	context.b_found_a_match = true
	env.Cursor = env.LimitBackward
	return true
}

func r_remove_question_suffixes(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_has_min_length(env, context) {
		return false
	}
	context.b_found_a_match = false
	env.LimitBackward = env.Cursor
	env.Cursor = env.Limit
	var v_1 = env.Limit - env.Cursor
lab0:
	for {
		env.Ket = env.Cursor
		if env.FindAmongB(A_14, context) == 0 {
			break lab0
		}
		env.Bra = env.Cursor
		if !env.SliceFrom("\u0BCD") {
			return false
		}
		context.b_found_a_match = true
		break lab0
	}
	env.Cursor = env.Limit - v_1
	env.Cursor = env.LimitBackward
	r_fix_endings(env, context)
	return true
}

func r_remove_command_suffixes(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_has_min_length(env, context) {
		return false
	}
	context.b_found_a_match = false
	env.LimitBackward = env.Cursor
	env.Cursor = env.Limit
	env.Ket = env.Cursor
	if env.FindAmongB(A_15, context) == 0 {
		return false
	}
	env.Bra = env.Cursor
	if !env.SliceDel() {
		return false
	}
	context.b_found_a_match = true
	env.Cursor = env.LimitBackward
	return true
}

func r_remove_um(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	context.b_found_a_match = false
	if !r_has_min_length(env, context) {
		return false
	}
	env.LimitBackward = env.Cursor
	env.Cursor = env.Limit
	env.Ket = env.Cursor
	if !env.EqSB("\u0BC1\u0BAE\u0BCD") {
		return false
	}
	env.Bra = env.Cursor
	if !env.SliceFrom("\u0BCD") {
		return false
	}
	context.b_found_a_match = true
	env.Cursor = env.LimitBackward
	var v_1 = env.Cursor
	r_fix_ending(env, context)
	env.Cursor = v_1
	return true
}

func r_remove_common_word_endings(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	context.b_found_a_match = false
	if !r_has_min_length(env, context) {
		return false
	}
	env.LimitBackward = env.Cursor
	env.Cursor = env.Limit
lab0:
	for {
		var v_1 = env.Limit - env.Cursor
	lab1:
		for {
			var v_2 = env.Limit - env.Cursor
			env.Ket = env.Cursor
		lab2:
			for {
				var v_3 = env.Limit - env.Cursor
			lab3:
				for {
					if !env.EqSB("\u0BC1\u0B9F\u0BA9\u0BCD") {
						break lab3
					}
					break lab2
				}
				env.Cursor = env.Limit - v_3
			lab4:
				for {
					if !env.EqSB("\u0BBF\u0BB2\u0BCD\u0BB2\u0BC8") {
						break lab4
					}
					break lab2
				}
				env.Cursor = env.Limit - v_3
			lab5:
				for {
					if !env.EqSB("\u0BBF\u0B9F\u0BAE\u0BCD") {
						break lab5
					}
					break lab2
				}
				env.Cursor = env.Limit - v_3
			lab6:
				for {
					if !env.EqSB("\u0BBF\u0BA9\u0BCD\u0BB1\u0BBF") {
						break lab6
					}
					break lab2
				}
				env.Cursor = env.Limit - v_3
			lab7:
				for {
					if !env.EqSB("\u0BBE\u0B95\u0BBF") {
						break lab7
					}
					break lab2
				}
				env.Cursor = env.Limit - v_3
			lab8:
				for {
					if !env.EqSB("\u0BBE\u0B95\u0BBF\u0BAF") {
						break lab8
					}
					break lab2
				}
				env.Cursor = env.Limit - v_3
			lab9:
				for {
					if !env.EqSB("\u0BC6\u0BA9\u0BCD\u0BB1\u0BC1") {
						break lab9
					}
					break lab2
				}
				env.Cursor = env.Limit - v_3
			lab10:
				for {
					if !env.EqSB("\u0BC1\u0BB3\u0BCD\u0BB3") {
						break lab10
					}
					break lab2
				}
				env.Cursor = env.Limit - v_3
			lab11:
				for {
					if !env.EqSB("\u0BC1\u0B9F\u0BC8\u0BAF") {
						break lab11
					}
					break lab2
				}
				env.Cursor = env.Limit - v_3
			lab12:
				for {
					if !env.EqSB("\u0BC1\u0B9F\u0BC8") {
						break lab12
					}
					break lab2
				}
				env.Cursor = env.Limit - v_3
			lab13:
				for {
					if !env.EqSB("\u0BC6\u0BA9\u0BC1\u0BAE\u0BCD") {
						break lab13
					}
					break lab2
				}
				env.Cursor = env.Limit - v_3
			lab14:
				for {
					if !env.EqSB("\u0BB2\u0BCD\u0BB2") {
						break lab14
					}
					var v_4 = env.Limit - env.Cursor
					var v_5 = env.Limit - env.Cursor
				lab15:
					for {
						if env.FindAmongB(A_16, context) == 0 {
							break lab15
						}
						break lab14
					}
					env.Cursor = env.Limit - v_5
					env.Cursor = env.Limit - v_4
					break lab2
				}
				env.Cursor = env.Limit - v_3
			lab16:
				for {
					if !env.EqSB("\u0BC6\u0BA9") {
						break lab16
					}
					break lab2
				}
				env.Cursor = env.Limit - v_3
				if !env.EqSB("\u0BBE\u0B95\u0BBF") {
					break lab1
				}
				break lab2
			}
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0BCD") {
				return false
			}
			context.b_found_a_match = true
			env.Cursor = env.Limit - v_2
			break lab0
		}
		env.Cursor = env.Limit - v_1
		var v_6 = env.Limit - env.Cursor
		env.Ket = env.Cursor
		if env.FindAmongB(A_17, context) == 0 {
			return false
		}
		env.Bra = env.Cursor
		if !env.SliceDel() {
			return false
		}
		context.b_found_a_match = true
		env.Cursor = env.Limit - v_6
		break lab0
	}
	env.Cursor = env.LimitBackward
	r_fix_endings(env, context)
	return true
}

func r_remove_vetrumai_urupukal(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	context.b_found_a_match = false
	context.b_found_vetrumai_urupu = false
	if !r_has_min_length(env, context) {
		return false
	}
	env.LimitBackward = env.Cursor
	env.Cursor = env.Limit
lab0:
	for {
		var v_1 = env.Limit - env.Cursor
	lab1:
		for {
			var v_2 = env.Limit - env.Cursor
			env.Ket = env.Cursor
			if !env.EqSB("\u0BA9\u0BC8") {
				break lab1
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			env.Cursor = env.Limit - v_2
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab2:
		for {
			var v_3 = env.Limit - env.Cursor
			env.Ket = env.Cursor
		lab3:
			for {
				var v_4 = env.Limit - env.Cursor
			lab4:
				for {
				lab5:
					for {
						var v_5 = env.Limit - env.Cursor
					lab6:
						for {
							if !env.EqSB("\u0BBF\u0BA9\u0BC8") {
								break lab6
							}
							break lab5
						}
						env.Cursor = env.Limit - v_5
						if !env.EqSB("\u0BC8") {
							break lab4
						}
						break lab5
					}
					var v_6 = env.Limit - env.Cursor
					var v_7 = env.Limit - env.Cursor
				lab7:
					for {
						if env.FindAmongB(A_18, context) == 0 {
							break lab7
						}
						break lab4
					}
					env.Cursor = env.Limit - v_7
					env.Cursor = env.Limit - v_6
					break lab3
				}
				env.Cursor = env.Limit - v_4
				if !env.EqSB("\u0BC8") {
					break lab2
				}
				var v_8 = env.Limit - env.Cursor
				if env.FindAmongB(A_19, context) == 0 {
					break lab2
				}
				if !env.EqSB("\u0BCD") {
					break lab2
				}
				env.Cursor = env.Limit - v_8
				break lab3
			}
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0BCD") {
				return false
			}
			env.Cursor = env.Limit - v_3
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab8:
		for {
			var v_9 = env.Limit - env.Cursor
			env.Ket = env.Cursor
		lab9:
			for {
				var v_10 = env.Limit - env.Cursor
			lab10:
				for {
					if !env.EqSB("\u0BCA\u0B9F\u0BC1") {
						break lab10
					}
					break lab9
				}
				env.Cursor = env.Limit - v_10
			lab11:
				for {
					if !env.EqSB("\u0BCB\u0B9F\u0BC1") {
						break lab11
					}
					break lab9
				}
				env.Cursor = env.Limit - v_10
			lab12:
				for {
					if !env.EqSB("\u0BBF\u0BB2\u0BCD") {
						break lab12
					}
					break lab9
				}
				env.Cursor = env.Limit - v_10
			lab13:
				for {
					if !env.EqSB("\u0BBF\u0BB1\u0BCD") {
						break lab13
					}
					break lab9
				}
				env.Cursor = env.Limit - v_10
			lab14:
				for {
					if !env.EqSB("\u0BBF\u0BA9\u0BCD") {
						break lab14
					}
					var v_11 = env.Limit - env.Cursor
					var v_12 = env.Limit - env.Cursor
				lab15:
					for {
						if !env.EqSB("\u0BAE") {
							break lab15
						}
						break lab14
					}
					env.Cursor = env.Limit - v_12
					env.Cursor = env.Limit - v_11
					break lab9
				}
				env.Cursor = env.Limit - v_10
			lab16:
				for {
					if !env.EqSB("\u0BBF\u0BA9\u0BCD\u0BB1\u0BC1") {
						break lab16
					}
					break lab9
				}
				env.Cursor = env.Limit - v_10
			lab17:
				for {
					if !env.EqSB("\u0BBF\u0BB0\u0BC1\u0BA8\u0BCD\u0BA4\u0BC1") {
						break lab17
					}
					break lab9
				}
				env.Cursor = env.Limit - v_10
			lab18:
				for {
					if !env.EqSB("\u0BB5\u0BBF\u0B9F") {
						break lab18
					}
					break lab9
				}
				env.Cursor = env.Limit - v_10
			lab19:
				for {
					if !(snowballRuntime.RuneCountInString(env.Current()) >= 7) {
						break lab19
					}
					if !env.EqSB("\u0BBF\u0B9F\u0BAE\u0BCD") {
						break lab19
					}
					break lab9
				}
				env.Cursor = env.Limit - v_10
			lab20:
				for {
					if !env.EqSB("\u0BBE\u0BB2\u0BCD") {
						break lab20
					}
					break lab9
				}
				env.Cursor = env.Limit - v_10
			lab21:
				for {
					if !env.EqSB("\u0BC1\u0B9F\u0BC8") {
						break lab21
					}
					break lab9
				}
				env.Cursor = env.Limit - v_10
			lab22:
				for {
					if !env.EqSB("\u0BBE\u0BAE\u0BB2\u0BCD") {
						break lab22
					}
					break lab9
				}
				env.Cursor = env.Limit - v_10
			lab23:
				for {
					if !env.EqSB("\u0BB2\u0BCD") {
						break lab23
					}
					var v_13 = env.Limit - env.Cursor
					var v_14 = env.Limit - env.Cursor
				lab24:
					for {
						if env.FindAmongB(A_20, context) == 0 {
							break lab24
						}
						break lab23
					}
					env.Cursor = env.Limit - v_14
					env.Cursor = env.Limit - v_13
					break lab9
				}
				env.Cursor = env.Limit - v_10
				if !env.EqSB("\u0BC1\u0BB3\u0BCD") {
					break lab8
				}
				break lab9
			}
			env.Bra = env.Cursor
			if !env.SliceFrom("\u0BCD") {
				return false
			}
			env.Cursor = env.Limit - v_9
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab25:
		for {
			var v_15 = env.Limit - env.Cursor
			env.Ket = env.Cursor
		lab26:
			for {
				var v_16 = env.Limit - env.Cursor
			lab27:
				for {
					if !env.EqSB("\u0B95\u0BA3\u0BCD") {
						break lab27
					}
					break lab26
				}
				env.Cursor = env.Limit - v_16
			lab28:
				for {
					if !env.EqSB("\u0BAE\u0BC1\u0BA9\u0BCD") {
						break lab28
					}
					break lab26
				}
				env.Cursor = env.Limit - v_16
			lab29:
				for {
					if !env.EqSB("\u0BAE\u0BC7\u0BB2\u0BCD") {
						break lab29
					}
					break lab26
				}
				env.Cursor = env.Limit - v_16
			lab30:
				for {
					if !env.EqSB("\u0BAE\u0BC7\u0BB1\u0BCD") {
						break lab30
					}
					break lab26
				}
				env.Cursor = env.Limit - v_16
			lab31:
				for {
					if !env.EqSB("\u0B95\u0BC0\u0BB4\u0BCD") {
						break lab31
					}
					break lab26
				}
				env.Cursor = env.Limit - v_16
			lab32:
				for {
					if !env.EqSB("\u0BAA\u0BBF\u0BA9\u0BCD") {
						break lab32
					}
					break lab26
				}
				env.Cursor = env.Limit - v_16
				if !env.EqSB("\u0BA4\u0BC1") {
					break lab25
				}
				var v_17 = env.Limit - env.Cursor
				var v_18 = env.Limit - env.Cursor
			lab33:
				for {
					if env.FindAmongB(A_21, context) == 0 {
						break lab33
					}
					break lab25
				}
				env.Cursor = env.Limit - v_18
				env.Cursor = env.Limit - v_17
				break lab26
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			env.Cursor = env.Limit - v_15
			break lab0
		}
		env.Cursor = env.Limit - v_1
		var v_19 = env.Limit - env.Cursor
		env.Ket = env.Cursor
		if !env.EqSB("\u0BC0") {
			return false
		}
		env.Bra = env.Cursor
		if !env.SliceFrom("\u0BBF") {
			return false
		}
		env.Cursor = env.Limit - v_19
		break lab0
	}
	context.b_found_a_match = true
	context.b_found_vetrumai_urupu = true
	var v_20 = env.Limit - env.Cursor
lab34:
	for {
		env.Ket = env.Cursor
		if !env.EqSB("\u0BBF\u0BA9\u0BCD") {
			break lab34
		}
		env.Bra = env.Cursor
		if !env.SliceFrom("\u0BCD") {
			return false
		}
		break lab34
	}
	env.Cursor = env.Limit - v_20
	env.Cursor = env.LimitBackward
	r_fix_endings(env, context)
	return true
}

func r_remove_tense_suffixes(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	context.b_found_a_match = true
replab0:
	for {
		var v_1 = env.Cursor
	lab1:
		for range [2]struct{}{} {
			if !context.b_found_a_match {
				break lab1
			}
			var v_2 = env.Cursor
			r_remove_tense_suffix(env, context)
			env.Cursor = v_2
			continue replab0
		}
		env.Cursor = v_1
		break replab0
	}
	return true
}

func r_remove_tense_suffix(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	context.b_found_a_match = false
	if !r_has_min_length(env, context) {
		return false
	}
	env.LimitBackward = env.Cursor
	env.Cursor = env.Limit
	var v_1 = env.Limit - env.Cursor
lab0:
	for {
	lab1:
		for {
			var v_2 = env.Limit - env.Cursor
		lab2:
			for {
				var v_3 = env.Limit - env.Cursor
				env.Ket = env.Cursor
				if env.FindAmongB(A_22, context) == 0 {
					break lab2
				}
				env.Bra = env.Cursor
				if !env.SliceDel() {
					return false
				}
				context.b_found_a_match = true
				env.Cursor = env.Limit - v_3
				break lab1
			}
			env.Cursor = env.Limit - v_2
		lab3:
			for {
				var v_4 = env.Limit - env.Cursor
				env.Ket = env.Cursor
			lab4:
				for {
					var v_5 = env.Limit - env.Cursor
				lab5:
					for {
						if !env.EqSB("\u0BAE\u0BBE\u0BB0\u0BCD") {
							break lab5
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab6:
					for {
						if !env.EqSB("\u0BAE\u0BBF\u0BA9\u0BCD") {
							break lab6
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab7:
					for {
						if !env.EqSB("\u0BA9\u0BA9\u0BCD") {
							break lab7
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab8:
					for {
						if !env.EqSB("\u0BA9\u0BBE\u0BA9\u0BCD") {
							break lab8
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab9:
					for {
						if !env.EqSB("\u0BA9\u0BBE\u0BB3\u0BCD") {
							break lab9
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab10:
					for {
						if !env.EqSB("\u0BA9\u0BBE\u0BB0\u0BCD") {
							break lab10
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab11:
					for {
						if !env.EqSB("\u0BB5\u0BA9\u0BCD") {
							break lab11
						}
						var v_6 = env.Limit - env.Cursor
						var v_7 = env.Limit - env.Cursor
					lab12:
						for {
							if env.FindAmongB(A_23, context) == 0 {
								break lab12
							}
							break lab11
						}
						env.Cursor = env.Limit - v_7
						env.Cursor = env.Limit - v_6
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab13:
					for {
						if !env.EqSB("\u0BA9\u0BB3\u0BCD") {
							break lab13
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab14:
					for {
						if !env.EqSB("\u0BB5\u0BB3\u0BCD") {
							break lab14
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab15:
					for {
						if !env.EqSB("\u0BA9\u0BB0\u0BCD") {
							break lab15
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab16:
					for {
						if !env.EqSB("\u0BB5\u0BB0\u0BCD") {
							break lab16
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab17:
					for {
						if !env.EqSB("\u0BA9") {
							break lab17
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab18:
					for {
						if !env.EqSB("\u0BAA") {
							break lab18
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab19:
					for {
						if !env.EqSB("\u0B95") {
							break lab19
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab20:
					for {
						if !env.EqSB("\u0BA4") {
							break lab20
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab21:
					for {
						if !env.EqSB("\u0BAF") {
							break lab21
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab22:
					for {
						if !env.EqSB("\u0BAA\u0BA9\u0BCD") {
							break lab22
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab23:
					for {
						if !env.EqSB("\u0BAA\u0BB3\u0BCD") {
							break lab23
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab24:
					for {
						if !env.EqSB("\u0BAA\u0BB0\u0BCD") {
							break lab24
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab25:
					for {
						if !env.EqSB("\u0BA4\u0BC1") {
							break lab25
						}
						var v_8 = env.Limit - env.Cursor
						var v_9 = env.Limit - env.Cursor
					lab26:
						for {
							if env.FindAmongB(A_24, context) == 0 {
								break lab26
							}
							break lab25
						}
						env.Cursor = env.Limit - v_9
						env.Cursor = env.Limit - v_8
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab27:
					for {
						if !env.EqSB("\u0BBF\u0BB1\u0BCD\u0BB1\u0BC1") {
							break lab27
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab28:
					for {
						if !env.EqSB("\u0BAA\u0BAE\u0BCD") {
							break lab28
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab29:
					for {
						if !env.EqSB("\u0BA9\u0BAE\u0BCD") {
							break lab29
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab30:
					for {
						if !env.EqSB("\u0BA4\u0BC1\u0BAE\u0BCD") {
							break lab30
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab31:
					for {
						if !env.EqSB("\u0BB1\u0BC1\u0BAE\u0BCD") {
							break lab31
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab32:
					for {
						if !env.EqSB("\u0B95\u0BC1\u0BAE\u0BCD") {
							break lab32
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab33:
					for {
						if !env.EqSB("\u0BA9\u0BC6\u0BA9\u0BCD") {
							break lab33
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
				lab34:
					for {
						if !env.EqSB("\u0BA9\u0BC8") {
							break lab34
						}
						break lab4
					}
					env.Cursor = env.Limit - v_5
					if !env.EqSB("\u0BB5\u0BC8") {
						break lab3
					}
					break lab4
				}
				env.Bra = env.Cursor
				if !env.SliceDel() {
					return false
				}
				context.b_found_a_match = true
				env.Cursor = env.Limit - v_4
				break lab1
			}
			env.Cursor = env.Limit - v_2
		lab35:
			for {
				var v_10 = env.Limit - env.Cursor
				env.Ket = env.Cursor
			lab36:
				for {
					var v_11 = env.Limit - env.Cursor
				lab37:
					for {
						if !env.EqSB("\u0BBE\u0BA9\u0BCD") {
							break lab37
						}
						var v_12 = env.Limit - env.Cursor
						var v_13 = env.Limit - env.Cursor
					lab38:
						for {
							if !env.EqSB("\u0B9A") {
								break lab38
							}
							break lab37
						}
						env.Cursor = env.Limit - v_13
						env.Cursor = env.Limit - v_12
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab39:
					for {
						if !env.EqSB("\u0BBE\u0BB3\u0BCD") {
							break lab39
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab40:
					for {
						if !env.EqSB("\u0BBE\u0BB0\u0BCD") {
							break lab40
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab41:
					for {
						if !env.EqSB("\u0BC7\u0BA9\u0BCD") {
							break lab41
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab42:
					for {
						if !env.EqSB("\u0BBE") {
							break lab42
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab43:
					for {
						if !env.EqSB("\u0BBE\u0BAE\u0BCD") {
							break lab43
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab44:
					for {
						if !env.EqSB("\u0BC6\u0BAE\u0BCD") {
							break lab44
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab45:
					for {
						if !env.EqSB("\u0BC7\u0BAE\u0BCD") {
							break lab45
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab46:
					for {
						if !env.EqSB("\u0BCB\u0BAE\u0BCD") {
							break lab46
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab47:
					for {
						if !env.EqSB("\u0B95\u0BC1\u0BAE\u0BCD") {
							break lab47
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab48:
					for {
						if !env.EqSB("\u0BA4\u0BC1\u0BAE\u0BCD") {
							break lab48
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab49:
					for {
						if !env.EqSB("\u0B9F\u0BC1\u0BAE\u0BCD") {
							break lab49
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab50:
					for {
						if !env.EqSB("\u0BB1\u0BC1\u0BAE\u0BCD") {
							break lab50
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab51:
					for {
						if !env.EqSB("\u0BBE\u0BAF\u0BCD") {
							break lab51
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab52:
					for {
						if !env.EqSB("\u0BA9\u0BC6\u0BA9\u0BCD") {
							break lab52
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab53:
					for {
						if !env.EqSB("\u0BA9\u0BBF\u0BB0\u0BCD") {
							break lab53
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
				lab54:
					for {
						if !env.EqSB("\u0BC0\u0BB0\u0BCD") {
							break lab54
						}
						break lab36
					}
					env.Cursor = env.Limit - v_11
					if !env.EqSB("\u0BC0\u0BAF\u0BB0\u0BCD") {
						break lab35
					}
					break lab36
				}
				env.Bra = env.Cursor
				if !env.SliceFrom("\u0BCD") {
					return false
				}
				context.b_found_a_match = true
				env.Cursor = env.Limit - v_10
				break lab1
			}
			env.Cursor = env.Limit - v_2
			var v_14 = env.Limit - env.Cursor
			env.Ket = env.Cursor
		lab55:
			for {
				var v_15 = env.Limit - env.Cursor
			lab56:
				for {
					if !env.EqSB("\u0B95\u0BC1") {
						break lab56
					}
					break lab55
				}
				env.Cursor = env.Limit - v_15
				if !env.EqSB("\u0BA4\u0BC1") {
					break lab0
				}
				break lab55
			}
			var v_16 = env.Limit - env.Cursor
			if !env.EqSB("\u0BCD") {
				break lab0
			}
			env.Cursor = env.Limit - v_16
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			context.b_found_a_match = true
			env.Cursor = env.Limit - v_14
			break lab1
		}
		break lab0
	}
	env.Cursor = env.Limit - v_1
	var v_17 = env.Limit - env.Cursor
lab57:
	for {
		env.Ket = env.Cursor
		if env.FindAmongB(A_25, context) == 0 {
			break lab57
		}
		env.Bra = env.Cursor
		if !env.SliceDel() {
			return false
		}
		context.b_found_a_match = true
		break lab57
	}
	env.Cursor = env.Limit - v_17
	env.Cursor = env.LimitBackward
	r_fix_endings(env, context)
	return true
}

func Stem(env *snowballRuntime.Env) bool {
	var context = &Context{
		b_found_vetrumai_urupu: false,
		b_found_a_match:        false,
	}
	_ = context
	context.b_found_vetrumai_urupu = false
	var v_1 = env.Cursor
	r_fix_ending(env, context)
	env.Cursor = v_1
	if !r_has_min_length(env, context) {
		return false
	}
	var v_2 = env.Cursor
	r_remove_question_prefixes(env, context)
	env.Cursor = v_2
	var v_3 = env.Cursor
	r_remove_pronoun_prefixes(env, context)
	env.Cursor = v_3
	var v_4 = env.Cursor
	r_remove_question_suffixes(env, context)
	env.Cursor = v_4
	var v_5 = env.Cursor
	r_remove_um(env, context)
	env.Cursor = v_5
	var v_6 = env.Cursor
	r_remove_common_word_endings(env, context)
	env.Cursor = v_6
	var v_7 = env.Cursor
	r_remove_vetrumai_urupukal(env, context)
	env.Cursor = v_7
	var v_8 = env.Cursor
	r_remove_plural_suffix(env, context)
	env.Cursor = v_8
	var v_9 = env.Cursor
	r_remove_command_suffixes(env, context)
	env.Cursor = v_9
	var v_10 = env.Cursor
	r_remove_tense_suffixes(env, context)
	env.Cursor = v_10
	return true
}
