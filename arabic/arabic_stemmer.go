//! Generated by Snowball 2.0.0 - https://snowballstem.org/

package arabic

import (
	snowballRuntime "github.com/blevesearch/snowballstem"
)

var A_0 = []*snowballRuntime.Among{
	{Str: "\u0640", A: -1, B: 1, F: nil},
	{Str: "\u064B", A: -1, B: 1, F: nil},
	{Str: "\u064C", A: -1, B: 1, F: nil},
	{Str: "\u064D", A: -1, B: 1, F: nil},
	{Str: "\u064E", A: -1, B: 1, F: nil},
	{Str: "\u064F", A: -1, B: 1, F: nil},
	{Str: "\u0650", A: -1, B: 1, F: nil},
	{Str: "\u0651", A: -1, B: 1, F: nil},
	{Str: "\u0652", A: -1, B: 1, F: nil},
	{Str: "\u0660", A: -1, B: 2, F: nil},
	{Str: "\u0661", A: -1, B: 3, F: nil},
	{Str: "\u0662", A: -1, B: 4, F: nil},
	{Str: "\u0663", A: -1, B: 5, F: nil},
	{Str: "\u0664", A: -1, B: 6, F: nil},
	{Str: "\u0665", A: -1, B: 7, F: nil},
	{Str: "\u0666", A: -1, B: 8, F: nil},
	{Str: "\u0667", A: -1, B: 9, F: nil},
	{Str: "\u0668", A: -1, B: 10, F: nil},
	{Str: "\u0669", A: -1, B: 11, F: nil},
	{Str: "\uFE80", A: -1, B: 12, F: nil},
	{Str: "\uFE81", A: -1, B: 16, F: nil},
	{Str: "\uFE82", A: -1, B: 16, F: nil},
	{Str: "\uFE83", A: -1, B: 13, F: nil},
	{Str: "\uFE84", A: -1, B: 13, F: nil},
	{Str: "\uFE85", A: -1, B: 17, F: nil},
	{Str: "\uFE86", A: -1, B: 17, F: nil},
	{Str: "\uFE87", A: -1, B: 14, F: nil},
	{Str: "\uFE88", A: -1, B: 14, F: nil},
	{Str: "\uFE89", A: -1, B: 15, F: nil},
	{Str: "\uFE8A", A: -1, B: 15, F: nil},
	{Str: "\uFE8B", A: -1, B: 15, F: nil},
	{Str: "\uFE8C", A: -1, B: 15, F: nil},
	{Str: "\uFE8D", A: -1, B: 18, F: nil},
	{Str: "\uFE8E", A: -1, B: 18, F: nil},
	{Str: "\uFE8F", A: -1, B: 19, F: nil},
	{Str: "\uFE90", A: -1, B: 19, F: nil},
	{Str: "\uFE91", A: -1, B: 19, F: nil},
	{Str: "\uFE92", A: -1, B: 19, F: nil},
	{Str: "\uFE93", A: -1, B: 20, F: nil},
	{Str: "\uFE94", A: -1, B: 20, F: nil},
	{Str: "\uFE95", A: -1, B: 21, F: nil},
	{Str: "\uFE96", A: -1, B: 21, F: nil},
	{Str: "\uFE97", A: -1, B: 21, F: nil},
	{Str: "\uFE98", A: -1, B: 21, F: nil},
	{Str: "\uFE99", A: -1, B: 22, F: nil},
	{Str: "\uFE9A", A: -1, B: 22, F: nil},
	{Str: "\uFE9B", A: -1, B: 22, F: nil},
	{Str: "\uFE9C", A: -1, B: 22, F: nil},
	{Str: "\uFE9D", A: -1, B: 23, F: nil},
	{Str: "\uFE9E", A: -1, B: 23, F: nil},
	{Str: "\uFE9F", A: -1, B: 23, F: nil},
	{Str: "\uFEA0", A: -1, B: 23, F: nil},
	{Str: "\uFEA1", A: -1, B: 24, F: nil},
	{Str: "\uFEA2", A: -1, B: 24, F: nil},
	{Str: "\uFEA3", A: -1, B: 24, F: nil},
	{Str: "\uFEA4", A: -1, B: 24, F: nil},
	{Str: "\uFEA5", A: -1, B: 25, F: nil},
	{Str: "\uFEA6", A: -1, B: 25, F: nil},
	{Str: "\uFEA7", A: -1, B: 25, F: nil},
	{Str: "\uFEA8", A: -1, B: 25, F: nil},
	{Str: "\uFEA9", A: -1, B: 26, F: nil},
	{Str: "\uFEAA", A: -1, B: 26, F: nil},
	{Str: "\uFEAB", A: -1, B: 27, F: nil},
	{Str: "\uFEAC", A: -1, B: 27, F: nil},
	{Str: "\uFEAD", A: -1, B: 28, F: nil},
	{Str: "\uFEAE", A: -1, B: 28, F: nil},
	{Str: "\uFEAF", A: -1, B: 29, F: nil},
	{Str: "\uFEB0", A: -1, B: 29, F: nil},
	{Str: "\uFEB1", A: -1, B: 30, F: nil},
	{Str: "\uFEB2", A: -1, B: 30, F: nil},
	{Str: "\uFEB3", A: -1, B: 30, F: nil},
	{Str: "\uFEB4", A: -1, B: 30, F: nil},
	{Str: "\uFEB5", A: -1, B: 31, F: nil},
	{Str: "\uFEB6", A: -1, B: 31, F: nil},
	{Str: "\uFEB7", A: -1, B: 31, F: nil},
	{Str: "\uFEB8", A: -1, B: 31, F: nil},
	{Str: "\uFEB9", A: -1, B: 32, F: nil},
	{Str: "\uFEBA", A: -1, B: 32, F: nil},
	{Str: "\uFEBB", A: -1, B: 32, F: nil},
	{Str: "\uFEBC", A: -1, B: 32, F: nil},
	{Str: "\uFEBD", A: -1, B: 33, F: nil},
	{Str: "\uFEBE", A: -1, B: 33, F: nil},
	{Str: "\uFEBF", A: -1, B: 33, F: nil},
	{Str: "\uFEC0", A: -1, B: 33, F: nil},
	{Str: "\uFEC1", A: -1, B: 34, F: nil},
	{Str: "\uFEC2", A: -1, B: 34, F: nil},
	{Str: "\uFEC3", A: -1, B: 34, F: nil},
	{Str: "\uFEC4", A: -1, B: 34, F: nil},
	{Str: "\uFEC5", A: -1, B: 35, F: nil},
	{Str: "\uFEC6", A: -1, B: 35, F: nil},
	{Str: "\uFEC7", A: -1, B: 35, F: nil},
	{Str: "\uFEC8", A: -1, B: 35, F: nil},
	{Str: "\uFEC9", A: -1, B: 36, F: nil},
	{Str: "\uFECA", A: -1, B: 36, F: nil},
	{Str: "\uFECB", A: -1, B: 36, F: nil},
	{Str: "\uFECC", A: -1, B: 36, F: nil},
	{Str: "\uFECD", A: -1, B: 37, F: nil},
	{Str: "\uFECE", A: -1, B: 37, F: nil},
	{Str: "\uFECF", A: -1, B: 37, F: nil},
	{Str: "\uFED0", A: -1, B: 37, F: nil},
	{Str: "\uFED1", A: -1, B: 38, F: nil},
	{Str: "\uFED2", A: -1, B: 38, F: nil},
	{Str: "\uFED3", A: -1, B: 38, F: nil},
	{Str: "\uFED4", A: -1, B: 38, F: nil},
	{Str: "\uFED5", A: -1, B: 39, F: nil},
	{Str: "\uFED6", A: -1, B: 39, F: nil},
	{Str: "\uFED7", A: -1, B: 39, F: nil},
	{Str: "\uFED8", A: -1, B: 39, F: nil},
	{Str: "\uFED9", A: -1, B: 40, F: nil},
	{Str: "\uFEDA", A: -1, B: 40, F: nil},
	{Str: "\uFEDB", A: -1, B: 40, F: nil},
	{Str: "\uFEDC", A: -1, B: 40, F: nil},
	{Str: "\uFEDD", A: -1, B: 41, F: nil},
	{Str: "\uFEDE", A: -1, B: 41, F: nil},
	{Str: "\uFEDF", A: -1, B: 41, F: nil},
	{Str: "\uFEE0", A: -1, B: 41, F: nil},
	{Str: "\uFEE1", A: -1, B: 42, F: nil},
	{Str: "\uFEE2", A: -1, B: 42, F: nil},
	{Str: "\uFEE3", A: -1, B: 42, F: nil},
	{Str: "\uFEE4", A: -1, B: 42, F: nil},
	{Str: "\uFEE5", A: -1, B: 43, F: nil},
	{Str: "\uFEE6", A: -1, B: 43, F: nil},
	{Str: "\uFEE7", A: -1, B: 43, F: nil},
	{Str: "\uFEE8", A: -1, B: 43, F: nil},
	{Str: "\uFEE9", A: -1, B: 44, F: nil},
	{Str: "\uFEEA", A: -1, B: 44, F: nil},
	{Str: "\uFEEB", A: -1, B: 44, F: nil},
	{Str: "\uFEEC", A: -1, B: 44, F: nil},
	{Str: "\uFEED", A: -1, B: 45, F: nil},
	{Str: "\uFEEE", A: -1, B: 45, F: nil},
	{Str: "\uFEEF", A: -1, B: 46, F: nil},
	{Str: "\uFEF0", A: -1, B: 46, F: nil},
	{Str: "\uFEF1", A: -1, B: 47, F: nil},
	{Str: "\uFEF2", A: -1, B: 47, F: nil},
	{Str: "\uFEF3", A: -1, B: 47, F: nil},
	{Str: "\uFEF4", A: -1, B: 47, F: nil},
	{Str: "\uFEF5", A: -1, B: 51, F: nil},
	{Str: "\uFEF6", A: -1, B: 51, F: nil},
	{Str: "\uFEF7", A: -1, B: 49, F: nil},
	{Str: "\uFEF8", A: -1, B: 49, F: nil},
	{Str: "\uFEF9", A: -1, B: 50, F: nil},
	{Str: "\uFEFA", A: -1, B: 50, F: nil},
	{Str: "\uFEFB", A: -1, B: 48, F: nil},
	{Str: "\uFEFC", A: -1, B: 48, F: nil},
}

var A_1 = []*snowballRuntime.Among{
	{Str: "\u0622", A: -1, B: 1, F: nil},
	{Str: "\u0623", A: -1, B: 1, F: nil},
	{Str: "\u0624", A: -1, B: 1, F: nil},
	{Str: "\u0625", A: -1, B: 1, F: nil},
	{Str: "\u0626", A: -1, B: 1, F: nil},
}

var A_2 = []*snowballRuntime.Among{
	{Str: "\u0622", A: -1, B: 1, F: nil},
	{Str: "\u0623", A: -1, B: 1, F: nil},
	{Str: "\u0624", A: -1, B: 2, F: nil},
	{Str: "\u0625", A: -1, B: 1, F: nil},
	{Str: "\u0626", A: -1, B: 3, F: nil},
}

var A_3 = []*snowballRuntime.Among{
	{Str: "\u0627\u0644", A: -1, B: 2, F: nil},
	{Str: "\u0628\u0627\u0644", A: -1, B: 1, F: nil},
	{Str: "\u0643\u0627\u0644", A: -1, B: 1, F: nil},
	{Str: "\u0644\u0644", A: -1, B: 2, F: nil},
}

var A_4 = []*snowballRuntime.Among{
	{Str: "\u0623\u0622", A: -1, B: 2, F: nil},
	{Str: "\u0623\u0623", A: -1, B: 1, F: nil},
	{Str: "\u0623\u0624", A: -1, B: 1, F: nil},
	{Str: "\u0623\u0625", A: -1, B: 4, F: nil},
	{Str: "\u0623\u0627", A: -1, B: 3, F: nil},
}

var A_5 = []*snowballRuntime.Among{
	{Str: "\u0641", A: -1, B: 1, F: nil},
	{Str: "\u0648", A: -1, B: 1, F: nil},
}

var A_6 = []*snowballRuntime.Among{
	{Str: "\u0627\u0644", A: -1, B: 2, F: nil},
	{Str: "\u0628\u0627\u0644", A: -1, B: 1, F: nil},
	{Str: "\u0643\u0627\u0644", A: -1, B: 1, F: nil},
	{Str: "\u0644\u0644", A: -1, B: 2, F: nil},
}

var A_7 = []*snowballRuntime.Among{
	{Str: "\u0628", A: -1, B: 1, F: nil},
	{Str: "\u0628\u0628", A: 0, B: 2, F: nil},
	{Str: "\u0643\u0643", A: -1, B: 3, F: nil},
}

var A_8 = []*snowballRuntime.Among{
	{Str: "\u0633\u0623", A: -1, B: 4, F: nil},
	{Str: "\u0633\u062A", A: -1, B: 2, F: nil},
	{Str: "\u0633\u0646", A: -1, B: 3, F: nil},
	{Str: "\u0633\u064A", A: -1, B: 1, F: nil},
}

var A_9 = []*snowballRuntime.Among{
	{Str: "\u062A\u0633\u062A", A: -1, B: 1, F: nil},
	{Str: "\u0646\u0633\u062A", A: -1, B: 1, F: nil},
	{Str: "\u064A\u0633\u062A", A: -1, B: 1, F: nil},
}

var A_10 = []*snowballRuntime.Among{
	{Str: "\u0643", A: -1, B: 1, F: nil},
	{Str: "\u0643\u0645", A: -1, B: 2, F: nil},
	{Str: "\u0647\u0645", A: -1, B: 2, F: nil},
	{Str: "\u0647\u0646", A: -1, B: 2, F: nil},
	{Str: "\u0647", A: -1, B: 1, F: nil},
	{Str: "\u064A", A: -1, B: 1, F: nil},
	{Str: "\u0643\u0645\u0627", A: -1, B: 3, F: nil},
	{Str: "\u0647\u0645\u0627", A: -1, B: 3, F: nil},
	{Str: "\u0646\u0627", A: -1, B: 2, F: nil},
	{Str: "\u0647\u0627", A: -1, B: 2, F: nil},
}

var A_11 = []*snowballRuntime.Among{
	{Str: "\u0646", A: -1, B: 1, F: nil},
}

var A_12 = []*snowballRuntime.Among{
	{Str: "\u0648", A: -1, B: 1, F: nil},
	{Str: "\u064A", A: -1, B: 1, F: nil},
	{Str: "\u0627", A: -1, B: 1, F: nil},
}

var A_13 = []*snowballRuntime.Among{
	{Str: "\u0627\u062A", A: -1, B: 1, F: nil},
}

var A_14 = []*snowballRuntime.Among{
	{Str: "\u062A", A: -1, B: 1, F: nil},
}

var A_15 = []*snowballRuntime.Among{
	{Str: "\u0629", A: -1, B: 1, F: nil},
}

var A_16 = []*snowballRuntime.Among{
	{Str: "\u064A", A: -1, B: 1, F: nil},
}

var A_17 = []*snowballRuntime.Among{
	{Str: "\u0643", A: -1, B: 1, F: nil},
	{Str: "\u0643\u0645", A: -1, B: 2, F: nil},
	{Str: "\u0647\u0645", A: -1, B: 2, F: nil},
	{Str: "\u0643\u0646", A: -1, B: 2, F: nil},
	{Str: "\u0647\u0646", A: -1, B: 2, F: nil},
	{Str: "\u0647", A: -1, B: 1, F: nil},
	{Str: "\u0643\u0645\u0648", A: -1, B: 3, F: nil},
	{Str: "\u0646\u064A", A: -1, B: 2, F: nil},
	{Str: "\u0643\u0645\u0627", A: -1, B: 3, F: nil},
	{Str: "\u0647\u0645\u0627", A: -1, B: 3, F: nil},
	{Str: "\u0646\u0627", A: -1, B: 2, F: nil},
	{Str: "\u0647\u0627", A: -1, B: 2, F: nil},
}

var A_18 = []*snowballRuntime.Among{
	{Str: "\u0646", A: -1, B: 1, F: nil},
	{Str: "\u0648\u0646", A: 0, B: 3, F: nil},
	{Str: "\u064A\u0646", A: 0, B: 3, F: nil},
	{Str: "\u0627\u0646", A: 0, B: 3, F: nil},
	{Str: "\u062A\u0646", A: 0, B: 2, F: nil},
	{Str: "\u064A", A: -1, B: 1, F: nil},
	{Str: "\u0627", A: -1, B: 1, F: nil},
	{Str: "\u062A\u0645\u0627", A: 6, B: 4, F: nil},
	{Str: "\u0646\u0627", A: 6, B: 2, F: nil},
	{Str: "\u062A\u0627", A: 6, B: 2, F: nil},
	{Str: "\u062A", A: -1, B: 1, F: nil},
}

var A_19 = []*snowballRuntime.Among{
	{Str: "\u062A\u0645", A: -1, B: 1, F: nil},
	{Str: "\u0648\u0627", A: -1, B: 1, F: nil},
}

var A_20 = []*snowballRuntime.Among{
	{Str: "\u0648", A: -1, B: 1, F: nil},
	{Str: "\u062A\u0645\u0648", A: 0, B: 2, F: nil},
}

var A_21 = []*snowballRuntime.Among{
	{Str: "\u0649", A: -1, B: 1, F: nil},
}

type Context struct {
	b_is_defined bool
	b_is_verb    bool
	b_is_noun    bool
}

func r_Normalize_pre(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	var v_1 = env.Cursor
lab0:
	for {
	replab1:
		for {
			var v_2 = env.Cursor
		lab2:
			for range [2]struct{}{} {
			lab3:
				for {
					var v_3 = env.Cursor
				lab4:
					for {
						env.Bra = env.Cursor
						among_var = env.FindAmong(A_0, context)
						if among_var == 0 {
							break lab4
						}
						env.Ket = env.Cursor
						if among_var == 1 {
							if !env.SliceDel() {
								return false
							}
						} else if among_var == 2 {
							if !env.SliceFrom("0") {
								return false
							}
						} else if among_var == 3 {
							if !env.SliceFrom("1") {
								return false
							}
						} else if among_var == 4 {
							if !env.SliceFrom("2") {
								return false
							}
						} else if among_var == 5 {
							if !env.SliceFrom("3") {
								return false
							}
						} else if among_var == 6 {
							if !env.SliceFrom("4") {
								return false
							}
						} else if among_var == 7 {
							if !env.SliceFrom("5") {
								return false
							}
						} else if among_var == 8 {
							if !env.SliceFrom("6") {
								return false
							}
						} else if among_var == 9 {
							if !env.SliceFrom("7") {
								return false
							}
						} else if among_var == 10 {
							if !env.SliceFrom("8") {
								return false
							}
						} else if among_var == 11 {
							if !env.SliceFrom("9") {
								return false
							}
						} else if among_var == 12 {
							if !env.SliceFrom("\u0621") {
								return false
							}
						} else if among_var == 13 {
							if !env.SliceFrom("\u0623") {
								return false
							}
						} else if among_var == 14 {
							if !env.SliceFrom("\u0625") {
								return false
							}
						} else if among_var == 15 {
							if !env.SliceFrom("\u0626") {
								return false
							}
						} else if among_var == 16 {
							if !env.SliceFrom("\u0622") {
								return false
							}
						} else if among_var == 17 {
							if !env.SliceFrom("\u0624") {
								return false
							}
						} else if among_var == 18 {
							if !env.SliceFrom("\u0627") {
								return false
							}
						} else if among_var == 19 {
							if !env.SliceFrom("\u0628") {
								return false
							}
						} else if among_var == 20 {
							if !env.SliceFrom("\u0629") {
								return false
							}
						} else if among_var == 21 {
							if !env.SliceFrom("\u062A") {
								return false
							}
						} else if among_var == 22 {
							if !env.SliceFrom("\u062B") {
								return false
							}
						} else if among_var == 23 {
							if !env.SliceFrom("\u062C") {
								return false
							}
						} else if among_var == 24 {
							if !env.SliceFrom("\u062D") {
								return false
							}
						} else if among_var == 25 {
							if !env.SliceFrom("\u062E") {
								return false
							}
						} else if among_var == 26 {
							if !env.SliceFrom("\u062F") {
								return false
							}
						} else if among_var == 27 {
							if !env.SliceFrom("\u0630") {
								return false
							}
						} else if among_var == 28 {
							if !env.SliceFrom("\u0631") {
								return false
							}
						} else if among_var == 29 {
							if !env.SliceFrom("\u0632") {
								return false
							}
						} else if among_var == 30 {
							if !env.SliceFrom("\u0633") {
								return false
							}
						} else if among_var == 31 {
							if !env.SliceFrom("\u0634") {
								return false
							}
						} else if among_var == 32 {
							if !env.SliceFrom("\u0635") {
								return false
							}
						} else if among_var == 33 {
							if !env.SliceFrom("\u0636") {
								return false
							}
						} else if among_var == 34 {
							if !env.SliceFrom("\u0637") {
								return false
							}
						} else if among_var == 35 {
							if !env.SliceFrom("\u0638") {
								return false
							}
						} else if among_var == 36 {
							if !env.SliceFrom("\u0639") {
								return false
							}
						} else if among_var == 37 {
							if !env.SliceFrom("\u063A") {
								return false
							}
						} else if among_var == 38 {
							if !env.SliceFrom("\u0641") {
								return false
							}
						} else if among_var == 39 {
							if !env.SliceFrom("\u0642") {
								return false
							}
						} else if among_var == 40 {
							if !env.SliceFrom("\u0643") {
								return false
							}
						} else if among_var == 41 {
							if !env.SliceFrom("\u0644") {
								return false
							}
						} else if among_var == 42 {
							if !env.SliceFrom("\u0645") {
								return false
							}
						} else if among_var == 43 {
							if !env.SliceFrom("\u0646") {
								return false
							}
						} else if among_var == 44 {
							if !env.SliceFrom("\u0647") {
								return false
							}
						} else if among_var == 45 {
							if !env.SliceFrom("\u0648") {
								return false
							}
						} else if among_var == 46 {
							if !env.SliceFrom("\u0649") {
								return false
							}
						} else if among_var == 47 {
							if !env.SliceFrom("\u064A") {
								return false
							}
						} else if among_var == 48 {
							if !env.SliceFrom("\u0644\u0627") {
								return false
							}
						} else if among_var == 49 {
							if !env.SliceFrom("\u0644\u0623") {
								return false
							}
						} else if among_var == 50 {
							if !env.SliceFrom("\u0644\u0625") {
								return false
							}
						} else if among_var == 51 {
							if !env.SliceFrom("\u0644\u0622") {
								return false
							}
						}
						break lab3
					}
					env.Cursor = v_3
					if env.Cursor >= env.Limit {
						break lab2
					}
					env.NextChar()
					break lab3
				}
				continue replab1
			}
			env.Cursor = v_2
			break replab1
		}
		break lab0
	}
	env.Cursor = v_1
	return true
}

func r_Normalize_post(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	var v_1 = env.Cursor
lab0:
	for {
		env.LimitBackward = env.Cursor
		env.Cursor = env.Limit
		env.Ket = env.Cursor
		if env.FindAmongB(A_1, context) == 0 {
			break lab0
		}
		env.Bra = env.Cursor
		if !env.SliceFrom("\u0621") {
			return false
		}
		env.Cursor = env.LimitBackward
		break lab0
	}
	env.Cursor = v_1
	var v_2 = env.Cursor
lab1:
	for {
	replab2:
		for {
			var v_3 = env.Cursor
		lab3:
			for range [2]struct{}{} {
			lab4:
				for {
					var v_4 = env.Cursor
				lab5:
					for {
						env.Bra = env.Cursor
						among_var = env.FindAmong(A_2, context)
						if among_var == 0 {
							break lab5
						}
						env.Ket = env.Cursor
						if among_var == 1 {
							if !env.SliceFrom("\u0627") {
								return false
							}
						} else if among_var == 2 {
							if !env.SliceFrom("\u0648") {
								return false
							}
						} else if among_var == 3 {
							if !env.SliceFrom("\u064A") {
								return false
							}
						}
						break lab4
					}
					env.Cursor = v_4
					if env.Cursor >= env.Limit {
						break lab3
					}
					env.NextChar()
					break lab4
				}
				continue replab2
			}
			env.Cursor = v_3
			break replab2
		}
		break lab1
	}
	env.Cursor = v_2
	return true
}

func r_Checks1(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Bra = env.Cursor
	among_var = env.FindAmong(A_3, context)
	if among_var == 0 {
		return false
	}
	env.Ket = env.Cursor
	if among_var == 1 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 4) {
			return false
		}
		context.b_is_noun = true
		context.b_is_verb = false
		context.b_is_defined = true
	} else if among_var == 2 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 3) {
			return false
		}
		context.b_is_noun = true
		context.b_is_verb = false
		context.b_is_defined = true
	}
	return true
}

func r_Prefix_Step1(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Bra = env.Cursor
	among_var = env.FindAmong(A_4, context)
	if among_var == 0 {
		return false
	}
	env.Ket = env.Cursor
	if among_var == 1 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 3) {
			return false
		}
		if !env.SliceFrom("\u0623") {
			return false
		}
	} else if among_var == 2 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 3) {
			return false
		}
		if !env.SliceFrom("\u0622") {
			return false
		}
	} else if among_var == 3 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 3) {
			return false
		}
		if !env.SliceFrom("\u0627") {
			return false
		}
	} else if among_var == 4 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 3) {
			return false
		}
		if !env.SliceFrom("\u0625") {
			return false
		}
	}
	return true
}

func r_Prefix_Step2(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var v_1 = env.Cursor
lab0:
	for {
		if !env.EqS("\u0641\u0627") {
			break lab0
		}
		return false
	}
	env.Cursor = v_1
	var v_2 = env.Cursor
lab1:
	for {
		if !env.EqS("\u0648\u0627") {
			break lab1
		}
		return false
	}
	env.Cursor = v_2
	env.Bra = env.Cursor
	if env.FindAmong(A_5, context) == 0 {
		return false
	}
	env.Ket = env.Cursor
	if !(snowballRuntime.RuneCountInString(env.Current()) > 3) {
		return false
	}
	if !env.SliceDel() {
		return false
	}
	return true
}

func r_Prefix_Step3a_Noun(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Bra = env.Cursor
	among_var = env.FindAmong(A_6, context)
	if among_var == 0 {
		return false
	}
	env.Ket = env.Cursor
	if among_var == 1 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 5) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 2 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 4) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	}
	return true
}

func r_Prefix_Step3b_Noun(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	var v_1 = env.Cursor
lab0:
	for {
		if !env.EqS("\u0628\u0627") {
			break lab0
		}
		return false
	}
	env.Cursor = v_1
	env.Bra = env.Cursor
	among_var = env.FindAmong(A_7, context)
	if among_var == 0 {
		return false
	}
	env.Ket = env.Cursor
	if among_var == 1 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 3) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 2 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 3) {
			return false
		}
		if !env.SliceFrom("\u0628") {
			return false
		}
	} else if among_var == 3 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 3) {
			return false
		}
		if !env.SliceFrom("\u0643") {
			return false
		}
	}
	return true
}

func r_Prefix_Step3_Verb(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Bra = env.Cursor
	among_var = env.FindAmong(A_8, context)
	if among_var == 0 {
		return false
	}
	env.Ket = env.Cursor
	if among_var == 1 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 4) {
			return false
		}
		if !env.SliceFrom("\u064A") {
			return false
		}
	} else if among_var == 2 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 4) {
			return false
		}
		if !env.SliceFrom("\u062A") {
			return false
		}
	} else if among_var == 3 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 4) {
			return false
		}
		if !env.SliceFrom("\u0646") {
			return false
		}
	} else if among_var == 4 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 4) {
			return false
		}
		if !env.SliceFrom("\u0623") {
			return false
		}
	}
	return true
}

func r_Prefix_Step4_Verb(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	env.Bra = env.Cursor
	if env.FindAmong(A_9, context) == 0 {
		return false
	}
	env.Ket = env.Cursor
	if !(snowballRuntime.RuneCountInString(env.Current()) > 4) {
		return false
	}
	context.b_is_verb = true
	context.b_is_noun = false
	if !env.SliceFrom("\u0627\u0633\u062A") {
		return false
	}
	return true
}

func r_Suffix_Noun_Step1a(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Ket = env.Cursor
	among_var = env.FindAmongB(A_10, context)
	if among_var == 0 {
		return false
	}
	env.Bra = env.Cursor
	if among_var == 1 {
		if !(snowballRuntime.RuneCountInString(env.Current()) >= 4) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 2 {
		if !(snowballRuntime.RuneCountInString(env.Current()) >= 5) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 3 {
		if !(snowballRuntime.RuneCountInString(env.Current()) >= 6) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	}
	return true
}

func r_Suffix_Noun_Step1b(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	env.Ket = env.Cursor
	if env.FindAmongB(A_11, context) == 0 {
		return false
	}
	env.Bra = env.Cursor
	if !(snowballRuntime.RuneCountInString(env.Current()) > 5) {
		return false
	}
	if !env.SliceDel() {
		return false
	}
	return true
}

func r_Suffix_Noun_Step2a(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	env.Ket = env.Cursor
	if env.FindAmongB(A_12, context) == 0 {
		return false
	}
	env.Bra = env.Cursor
	if !(snowballRuntime.RuneCountInString(env.Current()) > 4) {
		return false
	}
	if !env.SliceDel() {
		return false
	}
	return true
}

func r_Suffix_Noun_Step2b(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	env.Ket = env.Cursor
	if env.FindAmongB(A_13, context) == 0 {
		return false
	}
	env.Bra = env.Cursor
	if !(snowballRuntime.RuneCountInString(env.Current()) >= 5) {
		return false
	}
	if !env.SliceDel() {
		return false
	}
	return true
}

func r_Suffix_Noun_Step2c1(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	env.Ket = env.Cursor
	if env.FindAmongB(A_14, context) == 0 {
		return false
	}
	env.Bra = env.Cursor
	if !(snowballRuntime.RuneCountInString(env.Current()) >= 4) {
		return false
	}
	if !env.SliceDel() {
		return false
	}
	return true
}

func r_Suffix_Noun_Step2c2(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	env.Ket = env.Cursor
	if env.FindAmongB(A_15, context) == 0 {
		return false
	}
	env.Bra = env.Cursor
	if !(snowballRuntime.RuneCountInString(env.Current()) >= 4) {
		return false
	}
	if !env.SliceDel() {
		return false
	}
	return true
}

func r_Suffix_Noun_Step3(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	env.Ket = env.Cursor
	if env.FindAmongB(A_16, context) == 0 {
		return false
	}
	env.Bra = env.Cursor
	if !(snowballRuntime.RuneCountInString(env.Current()) >= 3) {
		return false
	}
	if !env.SliceDel() {
		return false
	}
	return true
}

func r_Suffix_Verb_Step1(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Ket = env.Cursor
	among_var = env.FindAmongB(A_17, context)
	if among_var == 0 {
		return false
	}
	env.Bra = env.Cursor
	if among_var == 1 {
		if !(snowballRuntime.RuneCountInString(env.Current()) >= 4) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 2 {
		if !(snowballRuntime.RuneCountInString(env.Current()) >= 5) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 3 {
		if !(snowballRuntime.RuneCountInString(env.Current()) >= 6) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	}
	return true
}

func r_Suffix_Verb_Step2a(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Ket = env.Cursor
	among_var = env.FindAmongB(A_18, context)
	if among_var == 0 {
		return false
	}
	env.Bra = env.Cursor
	if among_var == 1 {
		if !(snowballRuntime.RuneCountInString(env.Current()) >= 4) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 2 {
		if !(snowballRuntime.RuneCountInString(env.Current()) >= 5) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 3 {
		if !(snowballRuntime.RuneCountInString(env.Current()) > 5) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 4 {
		if !(snowballRuntime.RuneCountInString(env.Current()) >= 6) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	}
	return true
}

func r_Suffix_Verb_Step2b(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	env.Ket = env.Cursor
	if env.FindAmongB(A_19, context) == 0 {
		return false
	}
	env.Bra = env.Cursor
	if !(snowballRuntime.RuneCountInString(env.Current()) >= 5) {
		return false
	}
	if !env.SliceDel() {
		return false
	}
	return true
}

func r_Suffix_Verb_Step2c(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Ket = env.Cursor
	among_var = env.FindAmongB(A_20, context)
	if among_var == 0 {
		return false
	}
	env.Bra = env.Cursor
	if among_var == 1 {
		if !(snowballRuntime.RuneCountInString(env.Current()) >= 4) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 2 {
		if !(snowballRuntime.RuneCountInString(env.Current()) >= 6) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	}
	return true
}

func r_Suffix_All_alef_maqsura(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	env.Ket = env.Cursor
	if env.FindAmongB(A_21, context) == 0 {
		return false
	}
	env.Bra = env.Cursor
	if !env.SliceFrom("\u064A") {
		return false
	}
	return true
}

func Stem(env *snowballRuntime.Env) bool {
	var context = &Context{
		b_is_defined: false,
		b_is_verb:    false,
		b_is_noun:    false,
	}
	_ = context
	context.b_is_noun = true
	context.b_is_verb = true
	context.b_is_defined = false
	var v_1 = env.Cursor
	r_Checks1(env, context)
	env.Cursor = v_1
	r_Normalize_pre(env, context)
	env.LimitBackward = env.Cursor
	env.Cursor = env.Limit
	var v_3 = env.Limit - env.Cursor
lab0:
	for {
	lab1:
		for {
			var v_4 = env.Limit - env.Cursor
		lab2:
			for {
				if !context.b_is_verb {
					break lab2
				}
			lab3:
				for {
					var v_5 = env.Limit - env.Cursor
				lab4:
					for {
						var v_6 = 1
					replab5:
						for {
							var v_7 = env.Limit - env.Cursor
						lab6:
							for range [2]struct{}{} {
								if !r_Suffix_Verb_Step1(env, context) {
									break lab6
								}
								v_6--
								continue replab5
							}
							env.Cursor = env.Limit - v_7
							break replab5
						}
						if v_6 > 0 {
							break lab4
						}
					lab7:
						for {
							var v_8 = env.Limit - env.Cursor
						lab8:
							for {
								if !r_Suffix_Verb_Step2a(env, context) {
									break lab8
								}
								break lab7
							}
							env.Cursor = env.Limit - v_8
						lab9:
							for {
								if !r_Suffix_Verb_Step2c(env, context) {
									break lab9
								}
								break lab7
							}
							env.Cursor = env.Limit - v_8
							if env.Cursor <= env.LimitBackward {
								break lab4
							}
							env.PrevChar()
							break lab7
						}
						break lab3
					}
					env.Cursor = env.Limit - v_5
				lab10:
					for {
						if !r_Suffix_Verb_Step2b(env, context) {
							break lab10
						}
						break lab3
					}
					env.Cursor = env.Limit - v_5
					if !r_Suffix_Verb_Step2a(env, context) {
						break lab2
					}
					break lab3
				}
				break lab1
			}
			env.Cursor = env.Limit - v_4
		lab11:
			for {
				if !context.b_is_noun {
					break lab11
				}
				var v_9 = env.Limit - env.Cursor
			lab12:
				for {
				lab13:
					for {
						var v_10 = env.Limit - env.Cursor
					lab14:
						for {
							if !r_Suffix_Noun_Step2c2(env, context) {
								break lab14
							}
							break lab13
						}
						env.Cursor = env.Limit - v_10
					lab15:
						for {
						lab16:
							for {
								if !context.b_is_defined {
									break lab16
								}
								break lab15
							}
							if !r_Suffix_Noun_Step1a(env, context) {
								break lab15
							}
						lab17:
							for {
								var v_12 = env.Limit - env.Cursor
							lab18:
								for {
									if !r_Suffix_Noun_Step2a(env, context) {
										break lab18
									}
									break lab17
								}
								env.Cursor = env.Limit - v_12
							lab19:
								for {
									if !r_Suffix_Noun_Step2b(env, context) {
										break lab19
									}
									break lab17
								}
								env.Cursor = env.Limit - v_12
							lab20:
								for {
									if !r_Suffix_Noun_Step2c1(env, context) {
										break lab20
									}
									break lab17
								}
								env.Cursor = env.Limit - v_12
								if env.Cursor <= env.LimitBackward {
									break lab15
								}
								env.PrevChar()
								break lab17
							}
							break lab13
						}
						env.Cursor = env.Limit - v_10
					lab21:
						for {
							if !r_Suffix_Noun_Step1b(env, context) {
								break lab21
							}
						lab22:
							for {
								var v_13 = env.Limit - env.Cursor
							lab23:
								for {
									if !r_Suffix_Noun_Step2a(env, context) {
										break lab23
									}
									break lab22
								}
								env.Cursor = env.Limit - v_13
							lab24:
								for {
									if !r_Suffix_Noun_Step2b(env, context) {
										break lab24
									}
									break lab22
								}
								env.Cursor = env.Limit - v_13
								if !r_Suffix_Noun_Step2c1(env, context) {
									break lab21
								}
								break lab22
							}
							break lab13
						}
						env.Cursor = env.Limit - v_10
					lab25:
						for {
						lab26:
							for {
								if !context.b_is_defined {
									break lab26
								}
								break lab25
							}
							if !r_Suffix_Noun_Step2a(env, context) {
								break lab25
							}
							break lab13
						}
						env.Cursor = env.Limit - v_10
						if !r_Suffix_Noun_Step2b(env, context) {
							env.Cursor = env.Limit - v_9
							break lab12
						}
						break lab13
					}
					break lab12
				}
				if !r_Suffix_Noun_Step3(env, context) {
					break lab11
				}
				break lab1
			}
			env.Cursor = env.Limit - v_4
			if !r_Suffix_All_alef_maqsura(env, context) {
				break lab0
			}
			break lab1
		}
		break lab0
	}
	env.Cursor = env.Limit - v_3
	env.Cursor = env.LimitBackward
	var v_15 = env.Cursor
lab27:
	for {
		var v_16 = env.Cursor
	lab28:
		for {
			if !r_Prefix_Step1(env, context) {
				env.Cursor = v_16
				break lab28
			}
			break lab28
		}
		var v_17 = env.Cursor
	lab29:
		for {
			if !r_Prefix_Step2(env, context) {
				env.Cursor = v_17
				break lab29
			}
			break lab29
		}
	lab30:
		for {
			var v_18 = env.Cursor
		lab31:
			for {
				if !r_Prefix_Step3a_Noun(env, context) {
					break lab31
				}
				break lab30
			}
			env.Cursor = v_18
		lab32:
			for {
				if !context.b_is_noun {
					break lab32
				}
				if !r_Prefix_Step3b_Noun(env, context) {
					break lab32
				}
				break lab30
			}
			env.Cursor = v_18
			if !context.b_is_verb {
				break lab27
			}
			var v_19 = env.Cursor
		lab33:
			for {
				if !r_Prefix_Step3_Verb(env, context) {
					env.Cursor = v_19
					break lab33
				}
				break lab33
			}
			if !r_Prefix_Step4_Verb(env, context) {
				break lab27
			}
			break lab30
		}
		break lab27
	}
	env.Cursor = v_15
	r_Normalize_post(env, context)
	return true
}
