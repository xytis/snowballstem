//! Generated by Snowball 2.0.0 - https://snowballstem.org/

package turkish

import (
	snowballRuntime "github.com/blevesearch/snowballstem"
)

var A_0 = []*snowballRuntime.Among{
	{Str: "m", A: -1, B: -1, F: nil},
	{Str: "n", A: -1, B: -1, F: nil},
	{Str: "miz", A: -1, B: -1, F: nil},
	{Str: "niz", A: -1, B: -1, F: nil},
	{Str: "muz", A: -1, B: -1, F: nil},
	{Str: "nuz", A: -1, B: -1, F: nil},
	{Str: "m\u0131z", A: -1, B: -1, F: nil},
	{Str: "n\u0131z", A: -1, B: -1, F: nil},
	{Str: "m\u00FCz", A: -1, B: -1, F: nil},
	{Str: "n\u00FCz", A: -1, B: -1, F: nil},
}

var A_1 = []*snowballRuntime.Among{
	{Str: "leri", A: -1, B: -1, F: nil},
	{Str: "lar\u0131", A: -1, B: -1, F: nil},
}

var A_2 = []*snowballRuntime.Among{
	{Str: "ni", A: -1, B: -1, F: nil},
	{Str: "nu", A: -1, B: -1, F: nil},
	{Str: "n\u0131", A: -1, B: -1, F: nil},
	{Str: "n\u00FC", A: -1, B: -1, F: nil},
}

var A_3 = []*snowballRuntime.Among{
	{Str: "in", A: -1, B: -1, F: nil},
	{Str: "un", A: -1, B: -1, F: nil},
	{Str: "\u0131n", A: -1, B: -1, F: nil},
	{Str: "\u00FCn", A: -1, B: -1, F: nil},
}

var A_4 = []*snowballRuntime.Among{
	{Str: "a", A: -1, B: -1, F: nil},
	{Str: "e", A: -1, B: -1, F: nil},
}

var A_5 = []*snowballRuntime.Among{
	{Str: "na", A: -1, B: -1, F: nil},
	{Str: "ne", A: -1, B: -1, F: nil},
}

var A_6 = []*snowballRuntime.Among{
	{Str: "da", A: -1, B: -1, F: nil},
	{Str: "ta", A: -1, B: -1, F: nil},
	{Str: "de", A: -1, B: -1, F: nil},
	{Str: "te", A: -1, B: -1, F: nil},
}

var A_7 = []*snowballRuntime.Among{
	{Str: "nda", A: -1, B: -1, F: nil},
	{Str: "nde", A: -1, B: -1, F: nil},
}

var A_8 = []*snowballRuntime.Among{
	{Str: "dan", A: -1, B: -1, F: nil},
	{Str: "tan", A: -1, B: -1, F: nil},
	{Str: "den", A: -1, B: -1, F: nil},
	{Str: "ten", A: -1, B: -1, F: nil},
}

var A_9 = []*snowballRuntime.Among{
	{Str: "ndan", A: -1, B: -1, F: nil},
	{Str: "nden", A: -1, B: -1, F: nil},
}

var A_10 = []*snowballRuntime.Among{
	{Str: "la", A: -1, B: -1, F: nil},
	{Str: "le", A: -1, B: -1, F: nil},
}

var A_11 = []*snowballRuntime.Among{
	{Str: "ca", A: -1, B: -1, F: nil},
	{Str: "ce", A: -1, B: -1, F: nil},
}

var A_12 = []*snowballRuntime.Among{
	{Str: "im", A: -1, B: -1, F: nil},
	{Str: "um", A: -1, B: -1, F: nil},
	{Str: "\u0131m", A: -1, B: -1, F: nil},
	{Str: "\u00FCm", A: -1, B: -1, F: nil},
}

var A_13 = []*snowballRuntime.Among{
	{Str: "sin", A: -1, B: -1, F: nil},
	{Str: "sun", A: -1, B: -1, F: nil},
	{Str: "s\u0131n", A: -1, B: -1, F: nil},
	{Str: "s\u00FCn", A: -1, B: -1, F: nil},
}

var A_14 = []*snowballRuntime.Among{
	{Str: "iz", A: -1, B: -1, F: nil},
	{Str: "uz", A: -1, B: -1, F: nil},
	{Str: "\u0131z", A: -1, B: -1, F: nil},
	{Str: "\u00FCz", A: -1, B: -1, F: nil},
}

var A_15 = []*snowballRuntime.Among{
	{Str: "siniz", A: -1, B: -1, F: nil},
	{Str: "sunuz", A: -1, B: -1, F: nil},
	{Str: "s\u0131n\u0131z", A: -1, B: -1, F: nil},
	{Str: "s\u00FCn\u00FCz", A: -1, B: -1, F: nil},
}

var A_16 = []*snowballRuntime.Among{
	{Str: "lar", A: -1, B: -1, F: nil},
	{Str: "ler", A: -1, B: -1, F: nil},
}

var A_17 = []*snowballRuntime.Among{
	{Str: "niz", A: -1, B: -1, F: nil},
	{Str: "nuz", A: -1, B: -1, F: nil},
	{Str: "n\u0131z", A: -1, B: -1, F: nil},
	{Str: "n\u00FCz", A: -1, B: -1, F: nil},
}

var A_18 = []*snowballRuntime.Among{
	{Str: "dir", A: -1, B: -1, F: nil},
	{Str: "tir", A: -1, B: -1, F: nil},
	{Str: "dur", A: -1, B: -1, F: nil},
	{Str: "tur", A: -1, B: -1, F: nil},
	{Str: "d\u0131r", A: -1, B: -1, F: nil},
	{Str: "t\u0131r", A: -1, B: -1, F: nil},
	{Str: "d\u00FCr", A: -1, B: -1, F: nil},
	{Str: "t\u00FCr", A: -1, B: -1, F: nil},
}

var A_19 = []*snowballRuntime.Among{
	{Str: "cas\u0131na", A: -1, B: -1, F: nil},
	{Str: "cesine", A: -1, B: -1, F: nil},
}

var A_20 = []*snowballRuntime.Among{
	{Str: "di", A: -1, B: -1, F: nil},
	{Str: "ti", A: -1, B: -1, F: nil},
	{Str: "dik", A: -1, B: -1, F: nil},
	{Str: "tik", A: -1, B: -1, F: nil},
	{Str: "duk", A: -1, B: -1, F: nil},
	{Str: "tuk", A: -1, B: -1, F: nil},
	{Str: "d\u0131k", A: -1, B: -1, F: nil},
	{Str: "t\u0131k", A: -1, B: -1, F: nil},
	{Str: "d\u00FCk", A: -1, B: -1, F: nil},
	{Str: "t\u00FCk", A: -1, B: -1, F: nil},
	{Str: "dim", A: -1, B: -1, F: nil},
	{Str: "tim", A: -1, B: -1, F: nil},
	{Str: "dum", A: -1, B: -1, F: nil},
	{Str: "tum", A: -1, B: -1, F: nil},
	{Str: "d\u0131m", A: -1, B: -1, F: nil},
	{Str: "t\u0131m", A: -1, B: -1, F: nil},
	{Str: "d\u00FCm", A: -1, B: -1, F: nil},
	{Str: "t\u00FCm", A: -1, B: -1, F: nil},
	{Str: "din", A: -1, B: -1, F: nil},
	{Str: "tin", A: -1, B: -1, F: nil},
	{Str: "dun", A: -1, B: -1, F: nil},
	{Str: "tun", A: -1, B: -1, F: nil},
	{Str: "d\u0131n", A: -1, B: -1, F: nil},
	{Str: "t\u0131n", A: -1, B: -1, F: nil},
	{Str: "d\u00FCn", A: -1, B: -1, F: nil},
	{Str: "t\u00FCn", A: -1, B: -1, F: nil},
	{Str: "du", A: -1, B: -1, F: nil},
	{Str: "tu", A: -1, B: -1, F: nil},
	{Str: "d\u0131", A: -1, B: -1, F: nil},
	{Str: "t\u0131", A: -1, B: -1, F: nil},
	{Str: "d\u00FC", A: -1, B: -1, F: nil},
	{Str: "t\u00FC", A: -1, B: -1, F: nil},
}

var A_21 = []*snowballRuntime.Among{
	{Str: "sa", A: -1, B: -1, F: nil},
	{Str: "se", A: -1, B: -1, F: nil},
	{Str: "sak", A: -1, B: -1, F: nil},
	{Str: "sek", A: -1, B: -1, F: nil},
	{Str: "sam", A: -1, B: -1, F: nil},
	{Str: "sem", A: -1, B: -1, F: nil},
	{Str: "san", A: -1, B: -1, F: nil},
	{Str: "sen", A: -1, B: -1, F: nil},
}

var A_22 = []*snowballRuntime.Among{
	{Str: "mi\u015F", A: -1, B: -1, F: nil},
	{Str: "mu\u015F", A: -1, B: -1, F: nil},
	{Str: "m\u0131\u015F", A: -1, B: -1, F: nil},
	{Str: "m\u00FC\u015F", A: -1, B: -1, F: nil},
}

var A_23 = []*snowballRuntime.Among{
	{Str: "b", A: -1, B: 1, F: nil},
	{Str: "c", A: -1, B: 2, F: nil},
	{Str: "d", A: -1, B: 3, F: nil},
	{Str: "\u011F", A: -1, B: 4, F: nil},
}

var G_vowel = []byte{17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 8, 0, 0, 0, 0, 0, 0, 1}

var G_U = []byte{1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 1}

var G_vowel1 = []byte{1, 64, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}

var G_vowel2 = []byte{17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130}

var G_vowel3 = []byte{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}

var G_vowel4 = []byte{17}

var G_vowel5 = []byte{65}

var G_vowel6 = []byte{65}

type Context struct {
	b_continue_stemming_noun_suffixes bool
}

func r_check_vowel_harmony(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var v_1 = env.Limit - env.Cursor
golab0:
	for {
		var v_2 = env.Limit - env.Cursor
	lab1:
		for {
			if !env.InGroupingB(G_vowel, 97, 305) {
				break lab1
			}
			env.Cursor = env.Limit - v_2
			break golab0
		}
		env.Cursor = env.Limit - v_2
		if env.Cursor <= env.LimitBackward {
			return false
		}
		env.PrevChar()
	}
lab2:
	for {
		var v_3 = env.Limit - env.Cursor
	lab3:
		for {
			if !env.EqSB("a") {
				break lab3
			}
		golab4:
			for {
				var v_4 = env.Limit - env.Cursor
			lab5:
				for {
					if !env.InGroupingB(G_vowel1, 97, 305) {
						break lab5
					}
					env.Cursor = env.Limit - v_4
					break golab4
				}
				env.Cursor = env.Limit - v_4
				if env.Cursor <= env.LimitBackward {
					break lab3
				}
				env.PrevChar()
			}
			break lab2
		}
		env.Cursor = env.Limit - v_3
	lab6:
		for {
			if !env.EqSB("e") {
				break lab6
			}
		golab7:
			for {
				var v_5 = env.Limit - env.Cursor
			lab8:
				for {
					if !env.InGroupingB(G_vowel2, 101, 252) {
						break lab8
					}
					env.Cursor = env.Limit - v_5
					break golab7
				}
				env.Cursor = env.Limit - v_5
				if env.Cursor <= env.LimitBackward {
					break lab6
				}
				env.PrevChar()
			}
			break lab2
		}
		env.Cursor = env.Limit - v_3
	lab9:
		for {
			if !env.EqSB("\u0131") {
				break lab9
			}
		golab10:
			for {
				var v_6 = env.Limit - env.Cursor
			lab11:
				for {
					if !env.InGroupingB(G_vowel3, 97, 305) {
						break lab11
					}
					env.Cursor = env.Limit - v_6
					break golab10
				}
				env.Cursor = env.Limit - v_6
				if env.Cursor <= env.LimitBackward {
					break lab9
				}
				env.PrevChar()
			}
			break lab2
		}
		env.Cursor = env.Limit - v_3
	lab12:
		for {
			if !env.EqSB("i") {
				break lab12
			}
		golab13:
			for {
				var v_7 = env.Limit - env.Cursor
			lab14:
				for {
					if !env.InGroupingB(G_vowel4, 101, 105) {
						break lab14
					}
					env.Cursor = env.Limit - v_7
					break golab13
				}
				env.Cursor = env.Limit - v_7
				if env.Cursor <= env.LimitBackward {
					break lab12
				}
				env.PrevChar()
			}
			break lab2
		}
		env.Cursor = env.Limit - v_3
	lab15:
		for {
			if !env.EqSB("o") {
				break lab15
			}
		golab16:
			for {
				var v_8 = env.Limit - env.Cursor
			lab17:
				for {
					if !env.InGroupingB(G_vowel5, 111, 117) {
						break lab17
					}
					env.Cursor = env.Limit - v_8
					break golab16
				}
				env.Cursor = env.Limit - v_8
				if env.Cursor <= env.LimitBackward {
					break lab15
				}
				env.PrevChar()
			}
			break lab2
		}
		env.Cursor = env.Limit - v_3
	lab18:
		for {
			if !env.EqSB("\u00F6") {
				break lab18
			}
		golab19:
			for {
				var v_9 = env.Limit - env.Cursor
			lab20:
				for {
					if !env.InGroupingB(G_vowel6, 246, 252) {
						break lab20
					}
					env.Cursor = env.Limit - v_9
					break golab19
				}
				env.Cursor = env.Limit - v_9
				if env.Cursor <= env.LimitBackward {
					break lab18
				}
				env.PrevChar()
			}
			break lab2
		}
		env.Cursor = env.Limit - v_3
	lab21:
		for {
			if !env.EqSB("u") {
				break lab21
			}
		golab22:
			for {
				var v_10 = env.Limit - env.Cursor
			lab23:
				for {
					if !env.InGroupingB(G_vowel5, 111, 117) {
						break lab23
					}
					env.Cursor = env.Limit - v_10
					break golab22
				}
				env.Cursor = env.Limit - v_10
				if env.Cursor <= env.LimitBackward {
					break lab21
				}
				env.PrevChar()
			}
			break lab2
		}
		env.Cursor = env.Limit - v_3
		if !env.EqSB("\u00FC") {
			return false
		}
	golab24:
		for {
			var v_11 = env.Limit - env.Cursor
		lab25:
			for {
				if !env.InGroupingB(G_vowel6, 246, 252) {
					break lab25
				}
				env.Cursor = env.Limit - v_11
				break golab24
			}
			env.Cursor = env.Limit - v_11
			if env.Cursor <= env.LimitBackward {
				return false
			}
			env.PrevChar()
		}
		break lab2
	}
	env.Cursor = env.Limit - v_1
	return true
}

func r_mark_suffix_with_optional_n_consonant(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
lab0:
	for {
		var v_1 = env.Limit - env.Cursor
	lab1:
		for {
			if !env.EqSB("n") {
				break lab1
			}
			var v_2 = env.Limit - env.Cursor
			if !env.InGroupingB(G_vowel, 97, 305) {
				break lab1
			}
			env.Cursor = env.Limit - v_2
			break lab0
		}
		env.Cursor = env.Limit - v_1
		var v_3 = env.Limit - env.Cursor
	lab2:
		for {
			var v_4 = env.Limit - env.Cursor
			if !env.EqSB("n") {
				break lab2
			}
			env.Cursor = env.Limit - v_4
			return false
		}
		env.Cursor = env.Limit - v_3
		var v_5 = env.Limit - env.Cursor
		if env.Cursor <= env.LimitBackward {
			return false
		}
		env.PrevChar()
		if !env.InGroupingB(G_vowel, 97, 305) {
			return false
		}
		env.Cursor = env.Limit - v_5
		break lab0
	}
	return true
}

func r_mark_suffix_with_optional_s_consonant(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
lab0:
	for {
		var v_1 = env.Limit - env.Cursor
	lab1:
		for {
			if !env.EqSB("s") {
				break lab1
			}
			var v_2 = env.Limit - env.Cursor
			if !env.InGroupingB(G_vowel, 97, 305) {
				break lab1
			}
			env.Cursor = env.Limit - v_2
			break lab0
		}
		env.Cursor = env.Limit - v_1
		var v_3 = env.Limit - env.Cursor
	lab2:
		for {
			var v_4 = env.Limit - env.Cursor
			if !env.EqSB("s") {
				break lab2
			}
			env.Cursor = env.Limit - v_4
			return false
		}
		env.Cursor = env.Limit - v_3
		var v_5 = env.Limit - env.Cursor
		if env.Cursor <= env.LimitBackward {
			return false
		}
		env.PrevChar()
		if !env.InGroupingB(G_vowel, 97, 305) {
			return false
		}
		env.Cursor = env.Limit - v_5
		break lab0
	}
	return true
}

func r_mark_suffix_with_optional_y_consonant(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
lab0:
	for {
		var v_1 = env.Limit - env.Cursor
	lab1:
		for {
			if !env.EqSB("y") {
				break lab1
			}
			var v_2 = env.Limit - env.Cursor
			if !env.InGroupingB(G_vowel, 97, 305) {
				break lab1
			}
			env.Cursor = env.Limit - v_2
			break lab0
		}
		env.Cursor = env.Limit - v_1
		var v_3 = env.Limit - env.Cursor
	lab2:
		for {
			var v_4 = env.Limit - env.Cursor
			if !env.EqSB("y") {
				break lab2
			}
			env.Cursor = env.Limit - v_4
			return false
		}
		env.Cursor = env.Limit - v_3
		var v_5 = env.Limit - env.Cursor
		if env.Cursor <= env.LimitBackward {
			return false
		}
		env.PrevChar()
		if !env.InGroupingB(G_vowel, 97, 305) {
			return false
		}
		env.Cursor = env.Limit - v_5
		break lab0
	}
	return true
}

func r_mark_suffix_with_optional_U_vowel(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
lab0:
	for {
		var v_1 = env.Limit - env.Cursor
	lab1:
		for {
			if !env.InGroupingB(G_U, 105, 305) {
				break lab1
			}
			var v_2 = env.Limit - env.Cursor
			if !env.OutGroupingB(G_vowel, 97, 305) {
				break lab1
			}
			env.Cursor = env.Limit - v_2
			break lab0
		}
		env.Cursor = env.Limit - v_1
		var v_3 = env.Limit - env.Cursor
	lab2:
		for {
			var v_4 = env.Limit - env.Cursor
			if !env.InGroupingB(G_U, 105, 305) {
				break lab2
			}
			env.Cursor = env.Limit - v_4
			return false
		}
		env.Cursor = env.Limit - v_3
		var v_5 = env.Limit - env.Cursor
		if env.Cursor <= env.LimitBackward {
			return false
		}
		env.PrevChar()
		if !env.OutGroupingB(G_vowel, 97, 305) {
			return false
		}
		env.Cursor = env.Limit - v_5
		break lab0
	}
	return true
}

func r_mark_possessives(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if env.FindAmongB(A_0, context) == 0 {
		return false
	}
	if !r_mark_suffix_with_optional_U_vowel(env, context) {
		return false
	}
	return true
}

func r_mark_sU(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if !env.InGroupingB(G_U, 105, 305) {
		return false
	}
	if !r_mark_suffix_with_optional_s_consonant(env, context) {
		return false
	}
	return true
}

func r_mark_lArI(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if env.FindAmongB(A_1, context) == 0 {
		return false
	}
	return true
}

func r_mark_yU(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if !env.InGroupingB(G_U, 105, 305) {
		return false
	}
	if !r_mark_suffix_with_optional_y_consonant(env, context) {
		return false
	}
	return true
}

func r_mark_nU(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_2, context) == 0 {
		return false
	}
	return true
}

func r_mark_nUn(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_3, context) == 0 {
		return false
	}
	if !r_mark_suffix_with_optional_n_consonant(env, context) {
		return false
	}
	return true
}

func r_mark_yA(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_4, context) == 0 {
		return false
	}
	if !r_mark_suffix_with_optional_y_consonant(env, context) {
		return false
	}
	return true
}

func r_mark_nA(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_5, context) == 0 {
		return false
	}
	return true
}

func r_mark_DA(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_6, context) == 0 {
		return false
	}
	return true
}

func r_mark_ndA(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_7, context) == 0 {
		return false
	}
	return true
}

func r_mark_DAn(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_8, context) == 0 {
		return false
	}
	return true
}

func r_mark_ndAn(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_9, context) == 0 {
		return false
	}
	return true
}

func r_mark_ylA(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_10, context) == 0 {
		return false
	}
	if !r_mark_suffix_with_optional_y_consonant(env, context) {
		return false
	}
	return true
}

func r_mark_ki(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !env.EqSB("ki") {
		return false
	}
	return true
}

func r_mark_ncA(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_11, context) == 0 {
		return false
	}
	if !r_mark_suffix_with_optional_n_consonant(env, context) {
		return false
	}
	return true
}

func r_mark_yUm(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_12, context) == 0 {
		return false
	}
	if !r_mark_suffix_with_optional_y_consonant(env, context) {
		return false
	}
	return true
}

func r_mark_sUn(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_13, context) == 0 {
		return false
	}
	return true
}

func r_mark_yUz(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_14, context) == 0 {
		return false
	}
	if !r_mark_suffix_with_optional_y_consonant(env, context) {
		return false
	}
	return true
}

func r_mark_sUnUz(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if env.FindAmongB(A_15, context) == 0 {
		return false
	}
	return true
}

func r_mark_lAr(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_16, context) == 0 {
		return false
	}
	return true
}

func r_mark_nUz(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_17, context) == 0 {
		return false
	}
	return true
}

func r_mark_DUr(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_18, context) == 0 {
		return false
	}
	return true
}

func r_mark_cAsInA(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if env.FindAmongB(A_19, context) == 0 {
		return false
	}
	return true
}

func r_mark_yDU(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_20, context) == 0 {
		return false
	}
	if !r_mark_suffix_with_optional_y_consonant(env, context) {
		return false
	}
	return true
}

func r_mark_ysA(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if env.FindAmongB(A_21, context) == 0 {
		return false
	}
	if !r_mark_suffix_with_optional_y_consonant(env, context) {
		return false
	}
	return true
}

func r_mark_ymUs_(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_check_vowel_harmony(env, context) {
		return false
	}
	if env.FindAmongB(A_22, context) == 0 {
		return false
	}
	if !r_mark_suffix_with_optional_y_consonant(env, context) {
		return false
	}
	return true
}

func r_mark_yken(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !env.EqSB("ken") {
		return false
	}
	if !r_mark_suffix_with_optional_y_consonant(env, context) {
		return false
	}
	return true
}

func r_stem_nominal_verb_suffixes(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	env.Ket = env.Cursor
	context.b_continue_stemming_noun_suffixes = true
lab0:
	for {
		var v_1 = env.Limit - env.Cursor
	lab1:
		for {
		lab2:
			for {
				var v_2 = env.Limit - env.Cursor
			lab3:
				for {
					if !r_mark_ymUs_(env, context) {
						break lab3
					}
					break lab2
				}
				env.Cursor = env.Limit - v_2
			lab4:
				for {
					if !r_mark_yDU(env, context) {
						break lab4
					}
					break lab2
				}
				env.Cursor = env.Limit - v_2
			lab5:
				for {
					if !r_mark_ysA(env, context) {
						break lab5
					}
					break lab2
				}
				env.Cursor = env.Limit - v_2
				if !r_mark_yken(env, context) {
					break lab1
				}
				break lab2
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab6:
		for {
			if !r_mark_cAsInA(env, context) {
				break lab6
			}
		lab7:
			for {
				var v_3 = env.Limit - env.Cursor
			lab8:
				for {
					if !r_mark_sUnUz(env, context) {
						break lab8
					}
					break lab7
				}
				env.Cursor = env.Limit - v_3
			lab9:
				for {
					if !r_mark_lAr(env, context) {
						break lab9
					}
					break lab7
				}
				env.Cursor = env.Limit - v_3
			lab10:
				for {
					if !r_mark_yUm(env, context) {
						break lab10
					}
					break lab7
				}
				env.Cursor = env.Limit - v_3
			lab11:
				for {
					if !r_mark_sUn(env, context) {
						break lab11
					}
					break lab7
				}
				env.Cursor = env.Limit - v_3
			lab12:
				for {
					if !r_mark_yUz(env, context) {
						break lab12
					}
					break lab7
				}
				env.Cursor = env.Limit - v_3
				break lab7
			}
			if !r_mark_ymUs_(env, context) {
				break lab6
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab13:
		for {
			if !r_mark_lAr(env, context) {
				break lab13
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			var v_4 = env.Limit - env.Cursor
		lab14:
			for {
				env.Ket = env.Cursor
			lab15:
				for {
					var v_5 = env.Limit - env.Cursor
				lab16:
					for {
						if !r_mark_DUr(env, context) {
							break lab16
						}
						break lab15
					}
					env.Cursor = env.Limit - v_5
				lab17:
					for {
						if !r_mark_yDU(env, context) {
							break lab17
						}
						break lab15
					}
					env.Cursor = env.Limit - v_5
				lab18:
					for {
						if !r_mark_ysA(env, context) {
							break lab18
						}
						break lab15
					}
					env.Cursor = env.Limit - v_5
					if !r_mark_ymUs_(env, context) {
						env.Cursor = env.Limit - v_4
						break lab14
					}
					break lab15
				}
				break lab14
			}
			context.b_continue_stemming_noun_suffixes = false
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab19:
		for {
			if !r_mark_nUz(env, context) {
				break lab19
			}
		lab20:
			for {
				var v_6 = env.Limit - env.Cursor
			lab21:
				for {
					if !r_mark_yDU(env, context) {
						break lab21
					}
					break lab20
				}
				env.Cursor = env.Limit - v_6
				if !r_mark_ysA(env, context) {
					break lab19
				}
				break lab20
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab22:
		for {
		lab23:
			for {
				var v_7 = env.Limit - env.Cursor
			lab24:
				for {
					if !r_mark_sUnUz(env, context) {
						break lab24
					}
					break lab23
				}
				env.Cursor = env.Limit - v_7
			lab25:
				for {
					if !r_mark_yUz(env, context) {
						break lab25
					}
					break lab23
				}
				env.Cursor = env.Limit - v_7
			lab26:
				for {
					if !r_mark_sUn(env, context) {
						break lab26
					}
					break lab23
				}
				env.Cursor = env.Limit - v_7
				if !r_mark_yUm(env, context) {
					break lab22
				}
				break lab23
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			var v_8 = env.Limit - env.Cursor
		lab27:
			for {
				env.Ket = env.Cursor
				if !r_mark_ymUs_(env, context) {
					env.Cursor = env.Limit - v_8
					break lab27
				}
				break lab27
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
		if !r_mark_DUr(env, context) {
			return false
		}
		env.Bra = env.Cursor
		if !env.SliceDel() {
			return false
		}
		var v_9 = env.Limit - env.Cursor
	lab28:
		for {
			env.Ket = env.Cursor
		lab29:
			for {
				var v_10 = env.Limit - env.Cursor
			lab30:
				for {
					if !r_mark_sUnUz(env, context) {
						break lab30
					}
					break lab29
				}
				env.Cursor = env.Limit - v_10
			lab31:
				for {
					if !r_mark_lAr(env, context) {
						break lab31
					}
					break lab29
				}
				env.Cursor = env.Limit - v_10
			lab32:
				for {
					if !r_mark_yUm(env, context) {
						break lab32
					}
					break lab29
				}
				env.Cursor = env.Limit - v_10
			lab33:
				for {
					if !r_mark_sUn(env, context) {
						break lab33
					}
					break lab29
				}
				env.Cursor = env.Limit - v_10
			lab34:
				for {
					if !r_mark_yUz(env, context) {
						break lab34
					}
					break lab29
				}
				env.Cursor = env.Limit - v_10
				break lab29
			}
			if !r_mark_ymUs_(env, context) {
				env.Cursor = env.Limit - v_9
				break lab28
			}
			break lab28
		}
		break lab0
	}
	env.Bra = env.Cursor
	if !env.SliceDel() {
		return false
	}
	return true
}

func r_stem_suffix_chain_before_ki(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	env.Ket = env.Cursor
	if !r_mark_ki(env, context) {
		return false
	}
lab0:
	for {
		var v_1 = env.Limit - env.Cursor
	lab1:
		for {
			if !r_mark_DA(env, context) {
				break lab1
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			var v_2 = env.Limit - env.Cursor
		lab2:
			for {
				env.Ket = env.Cursor
			lab3:
				for {
					var v_3 = env.Limit - env.Cursor
				lab4:
					for {
						if !r_mark_lAr(env, context) {
							break lab4
						}
						env.Bra = env.Cursor
						if !env.SliceDel() {
							return false
						}
						var v_4 = env.Limit - env.Cursor
					lab5:
						for {
							if !r_stem_suffix_chain_before_ki(env, context) {
								env.Cursor = env.Limit - v_4
								break lab5
							}
							break lab5
						}
						break lab3
					}
					env.Cursor = env.Limit - v_3
					if !r_mark_possessives(env, context) {
						env.Cursor = env.Limit - v_2
						break lab2
					}
					env.Bra = env.Cursor
					if !env.SliceDel() {
						return false
					}
					var v_5 = env.Limit - env.Cursor
				lab6:
					for {
						env.Ket = env.Cursor
						if !r_mark_lAr(env, context) {
							env.Cursor = env.Limit - v_5
							break lab6
						}
						env.Bra = env.Cursor
						if !env.SliceDel() {
							return false
						}
						if !r_stem_suffix_chain_before_ki(env, context) {
							env.Cursor = env.Limit - v_5
							break lab6
						}
						break lab6
					}
					break lab3
				}
				break lab2
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab7:
		for {
			if !r_mark_nUn(env, context) {
				break lab7
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			var v_6 = env.Limit - env.Cursor
		lab8:
			for {
				env.Ket = env.Cursor
			lab9:
				for {
					var v_7 = env.Limit - env.Cursor
				lab10:
					for {
						if !r_mark_lArI(env, context) {
							break lab10
						}
						env.Bra = env.Cursor
						if !env.SliceDel() {
							return false
						}
						break lab9
					}
					env.Cursor = env.Limit - v_7
				lab11:
					for {
						env.Ket = env.Cursor
					lab12:
						for {
							var v_8 = env.Limit - env.Cursor
						lab13:
							for {
								if !r_mark_possessives(env, context) {
									break lab13
								}
								break lab12
							}
							env.Cursor = env.Limit - v_8
							if !r_mark_sU(env, context) {
								break lab11
							}
							break lab12
						}
						env.Bra = env.Cursor
						if !env.SliceDel() {
							return false
						}
						var v_9 = env.Limit - env.Cursor
					lab14:
						for {
							env.Ket = env.Cursor
							if !r_mark_lAr(env, context) {
								env.Cursor = env.Limit - v_9
								break lab14
							}
							env.Bra = env.Cursor
							if !env.SliceDel() {
								return false
							}
							if !r_stem_suffix_chain_before_ki(env, context) {
								env.Cursor = env.Limit - v_9
								break lab14
							}
							break lab14
						}
						break lab9
					}
					env.Cursor = env.Limit - v_7
					if !r_stem_suffix_chain_before_ki(env, context) {
						env.Cursor = env.Limit - v_6
						break lab8
					}
					break lab9
				}
				break lab8
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
		if !r_mark_ndA(env, context) {
			return false
		}
	lab15:
		for {
			var v_10 = env.Limit - env.Cursor
		lab16:
			for {
				if !r_mark_lArI(env, context) {
					break lab16
				}
				env.Bra = env.Cursor
				if !env.SliceDel() {
					return false
				}
				break lab15
			}
			env.Cursor = env.Limit - v_10
		lab17:
			for {
				if !r_mark_sU(env, context) {
					break lab17
				}
				env.Bra = env.Cursor
				if !env.SliceDel() {
					return false
				}
				var v_11 = env.Limit - env.Cursor
			lab18:
				for {
					env.Ket = env.Cursor
					if !r_mark_lAr(env, context) {
						env.Cursor = env.Limit - v_11
						break lab18
					}
					env.Bra = env.Cursor
					if !env.SliceDel() {
						return false
					}
					if !r_stem_suffix_chain_before_ki(env, context) {
						env.Cursor = env.Limit - v_11
						break lab18
					}
					break lab18
				}
				break lab15
			}
			env.Cursor = env.Limit - v_10
			if !r_stem_suffix_chain_before_ki(env, context) {
				return false
			}
			break lab15
		}
		break lab0
	}
	return true
}

func r_stem_noun_suffixes(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
lab0:
	for {
		var v_1 = env.Limit - env.Cursor
	lab1:
		for {
			env.Ket = env.Cursor
			if !r_mark_lAr(env, context) {
				break lab1
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			var v_2 = env.Limit - env.Cursor
		lab2:
			for {
				if !r_stem_suffix_chain_before_ki(env, context) {
					env.Cursor = env.Limit - v_2
					break lab2
				}
				break lab2
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab3:
		for {
			env.Ket = env.Cursor
			if !r_mark_ncA(env, context) {
				break lab3
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			var v_3 = env.Limit - env.Cursor
		lab4:
			for {
			lab5:
				for {
					var v_4 = env.Limit - env.Cursor
				lab6:
					for {
						env.Ket = env.Cursor
						if !r_mark_lArI(env, context) {
							break lab6
						}
						env.Bra = env.Cursor
						if !env.SliceDel() {
							return false
						}
						break lab5
					}
					env.Cursor = env.Limit - v_4
				lab7:
					for {
						env.Ket = env.Cursor
					lab8:
						for {
							var v_5 = env.Limit - env.Cursor
						lab9:
							for {
								if !r_mark_possessives(env, context) {
									break lab9
								}
								break lab8
							}
							env.Cursor = env.Limit - v_5
							if !r_mark_sU(env, context) {
								break lab7
							}
							break lab8
						}
						env.Bra = env.Cursor
						if !env.SliceDel() {
							return false
						}
						var v_6 = env.Limit - env.Cursor
					lab10:
						for {
							env.Ket = env.Cursor
							if !r_mark_lAr(env, context) {
								env.Cursor = env.Limit - v_6
								break lab10
							}
							env.Bra = env.Cursor
							if !env.SliceDel() {
								return false
							}
							if !r_stem_suffix_chain_before_ki(env, context) {
								env.Cursor = env.Limit - v_6
								break lab10
							}
							break lab10
						}
						break lab5
					}
					env.Cursor = env.Limit - v_4
					env.Ket = env.Cursor
					if !r_mark_lAr(env, context) {
						env.Cursor = env.Limit - v_3
						break lab4
					}
					env.Bra = env.Cursor
					if !env.SliceDel() {
						return false
					}
					if !r_stem_suffix_chain_before_ki(env, context) {
						env.Cursor = env.Limit - v_3
						break lab4
					}
					break lab5
				}
				break lab4
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab11:
		for {
			env.Ket = env.Cursor
		lab12:
			for {
				var v_7 = env.Limit - env.Cursor
			lab13:
				for {
					if !r_mark_ndA(env, context) {
						break lab13
					}
					break lab12
				}
				env.Cursor = env.Limit - v_7
				if !r_mark_nA(env, context) {
					break lab11
				}
				break lab12
			}
		lab14:
			for {
				var v_8 = env.Limit - env.Cursor
			lab15:
				for {
					if !r_mark_lArI(env, context) {
						break lab15
					}
					env.Bra = env.Cursor
					if !env.SliceDel() {
						return false
					}
					break lab14
				}
				env.Cursor = env.Limit - v_8
			lab16:
				for {
					if !r_mark_sU(env, context) {
						break lab16
					}
					env.Bra = env.Cursor
					if !env.SliceDel() {
						return false
					}
					var v_9 = env.Limit - env.Cursor
				lab17:
					for {
						env.Ket = env.Cursor
						if !r_mark_lAr(env, context) {
							env.Cursor = env.Limit - v_9
							break lab17
						}
						env.Bra = env.Cursor
						if !env.SliceDel() {
							return false
						}
						if !r_stem_suffix_chain_before_ki(env, context) {
							env.Cursor = env.Limit - v_9
							break lab17
						}
						break lab17
					}
					break lab14
				}
				env.Cursor = env.Limit - v_8
				if !r_stem_suffix_chain_before_ki(env, context) {
					break lab11
				}
				break lab14
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab18:
		for {
			env.Ket = env.Cursor
		lab19:
			for {
				var v_10 = env.Limit - env.Cursor
			lab20:
				for {
					if !r_mark_ndAn(env, context) {
						break lab20
					}
					break lab19
				}
				env.Cursor = env.Limit - v_10
				if !r_mark_nU(env, context) {
					break lab18
				}
				break lab19
			}
		lab21:
			for {
				var v_11 = env.Limit - env.Cursor
			lab22:
				for {
					if !r_mark_sU(env, context) {
						break lab22
					}
					env.Bra = env.Cursor
					if !env.SliceDel() {
						return false
					}
					var v_12 = env.Limit - env.Cursor
				lab23:
					for {
						env.Ket = env.Cursor
						if !r_mark_lAr(env, context) {
							env.Cursor = env.Limit - v_12
							break lab23
						}
						env.Bra = env.Cursor
						if !env.SliceDel() {
							return false
						}
						if !r_stem_suffix_chain_before_ki(env, context) {
							env.Cursor = env.Limit - v_12
							break lab23
						}
						break lab23
					}
					break lab21
				}
				env.Cursor = env.Limit - v_11
				if !r_mark_lArI(env, context) {
					break lab18
				}
				break lab21
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab24:
		for {
			env.Ket = env.Cursor
			if !r_mark_DAn(env, context) {
				break lab24
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			var v_13 = env.Limit - env.Cursor
		lab25:
			for {
				env.Ket = env.Cursor
			lab26:
				for {
					var v_14 = env.Limit - env.Cursor
				lab27:
					for {
						if !r_mark_possessives(env, context) {
							break lab27
						}
						env.Bra = env.Cursor
						if !env.SliceDel() {
							return false
						}
						var v_15 = env.Limit - env.Cursor
					lab28:
						for {
							env.Ket = env.Cursor
							if !r_mark_lAr(env, context) {
								env.Cursor = env.Limit - v_15
								break lab28
							}
							env.Bra = env.Cursor
							if !env.SliceDel() {
								return false
							}
							if !r_stem_suffix_chain_before_ki(env, context) {
								env.Cursor = env.Limit - v_15
								break lab28
							}
							break lab28
						}
						break lab26
					}
					env.Cursor = env.Limit - v_14
				lab29:
					for {
						if !r_mark_lAr(env, context) {
							break lab29
						}
						env.Bra = env.Cursor
						if !env.SliceDel() {
							return false
						}
						var v_16 = env.Limit - env.Cursor
					lab30:
						for {
							if !r_stem_suffix_chain_before_ki(env, context) {
								env.Cursor = env.Limit - v_16
								break lab30
							}
							break lab30
						}
						break lab26
					}
					env.Cursor = env.Limit - v_14
					if !r_stem_suffix_chain_before_ki(env, context) {
						env.Cursor = env.Limit - v_13
						break lab25
					}
					break lab26
				}
				break lab25
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab31:
		for {
			env.Ket = env.Cursor
		lab32:
			for {
				var v_17 = env.Limit - env.Cursor
			lab33:
				for {
					if !r_mark_nUn(env, context) {
						break lab33
					}
					break lab32
				}
				env.Cursor = env.Limit - v_17
				if !r_mark_ylA(env, context) {
					break lab31
				}
				break lab32
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			var v_18 = env.Limit - env.Cursor
		lab34:
			for {
			lab35:
				for {
					var v_19 = env.Limit - env.Cursor
				lab36:
					for {
						env.Ket = env.Cursor
						if !r_mark_lAr(env, context) {
							break lab36
						}
						env.Bra = env.Cursor
						if !env.SliceDel() {
							return false
						}
						if !r_stem_suffix_chain_before_ki(env, context) {
							break lab36
						}
						break lab35
					}
					env.Cursor = env.Limit - v_19
				lab37:
					for {
						env.Ket = env.Cursor
					lab38:
						for {
							var v_20 = env.Limit - env.Cursor
						lab39:
							for {
								if !r_mark_possessives(env, context) {
									break lab39
								}
								break lab38
							}
							env.Cursor = env.Limit - v_20
							if !r_mark_sU(env, context) {
								break lab37
							}
							break lab38
						}
						env.Bra = env.Cursor
						if !env.SliceDel() {
							return false
						}
						var v_21 = env.Limit - env.Cursor
					lab40:
						for {
							env.Ket = env.Cursor
							if !r_mark_lAr(env, context) {
								env.Cursor = env.Limit - v_21
								break lab40
							}
							env.Bra = env.Cursor
							if !env.SliceDel() {
								return false
							}
							if !r_stem_suffix_chain_before_ki(env, context) {
								env.Cursor = env.Limit - v_21
								break lab40
							}
							break lab40
						}
						break lab35
					}
					env.Cursor = env.Limit - v_19
					if !r_stem_suffix_chain_before_ki(env, context) {
						env.Cursor = env.Limit - v_18
						break lab34
					}
					break lab35
				}
				break lab34
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab41:
		for {
			env.Ket = env.Cursor
			if !r_mark_lArI(env, context) {
				break lab41
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab42:
		for {
			if !r_stem_suffix_chain_before_ki(env, context) {
				break lab42
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
	lab43:
		for {
			env.Ket = env.Cursor
		lab44:
			for {
				var v_22 = env.Limit - env.Cursor
			lab45:
				for {
					if !r_mark_DA(env, context) {
						break lab45
					}
					break lab44
				}
				env.Cursor = env.Limit - v_22
			lab46:
				for {
					if !r_mark_yU(env, context) {
						break lab46
					}
					break lab44
				}
				env.Cursor = env.Limit - v_22
				if !r_mark_yA(env, context) {
					break lab43
				}
				break lab44
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			var v_23 = env.Limit - env.Cursor
		lab47:
			for {
				env.Ket = env.Cursor
			lab48:
				for {
					var v_24 = env.Limit - env.Cursor
				lab49:
					for {
						if !r_mark_possessives(env, context) {
							break lab49
						}
						env.Bra = env.Cursor
						if !env.SliceDel() {
							return false
						}
						var v_25 = env.Limit - env.Cursor
					lab50:
						for {
							env.Ket = env.Cursor
							if !r_mark_lAr(env, context) {
								env.Cursor = env.Limit - v_25
								break lab50
							}
							break lab50
						}
						break lab48
					}
					env.Cursor = env.Limit - v_24
					if !r_mark_lAr(env, context) {
						env.Cursor = env.Limit - v_23
						break lab47
					}
					break lab48
				}
				env.Bra = env.Cursor
				if !env.SliceDel() {
					return false
				}
				env.Ket = env.Cursor
				if !r_stem_suffix_chain_before_ki(env, context) {
					env.Cursor = env.Limit - v_23
					break lab47
				}
				break lab47
			}
			break lab0
		}
		env.Cursor = env.Limit - v_1
		env.Ket = env.Cursor
	lab51:
		for {
			var v_26 = env.Limit - env.Cursor
		lab52:
			for {
				if !r_mark_possessives(env, context) {
					break lab52
				}
				break lab51
			}
			env.Cursor = env.Limit - v_26
			if !r_mark_sU(env, context) {
				return false
			}
			break lab51
		}
		env.Bra = env.Cursor
		if !env.SliceDel() {
			return false
		}
		var v_27 = env.Limit - env.Cursor
	lab53:
		for {
			env.Ket = env.Cursor
			if !r_mark_lAr(env, context) {
				env.Cursor = env.Limit - v_27
				break lab53
			}
			env.Bra = env.Cursor
			if !env.SliceDel() {
				return false
			}
			if !r_stem_suffix_chain_before_ki(env, context) {
				env.Cursor = env.Limit - v_27
				break lab53
			}
			break lab53
		}
		break lab0
	}
	return true
}

func r_post_process_last_consonants(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Ket = env.Cursor
	among_var = env.FindAmongB(A_23, context)
	if among_var == 0 {
		return false
	}
	env.Bra = env.Cursor
	if among_var == 1 {
		if !env.SliceFrom("p") {
			return false
		}
	} else if among_var == 2 {
		if !env.SliceFrom("\u00E7") {
			return false
		}
	} else if among_var == 3 {
		if !env.SliceFrom("t") {
			return false
		}
	} else if among_var == 4 {
		if !env.SliceFrom("k") {
			return false
		}
	}
	return true
}

func r_append_U_to_stems_ending_with_d_or_g(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var v_1 = env.Limit - env.Cursor
lab0:
	for {
		var v_2 = env.Limit - env.Cursor
	lab1:
		for {
			if !env.EqSB("d") {
				break lab1
			}
			break lab0
		}
		env.Cursor = env.Limit - v_2
		if !env.EqSB("g") {
			return false
		}
		break lab0
	}
	env.Cursor = env.Limit - v_1
lab2:
	for {
		var v_3 = env.Limit - env.Cursor
	lab3:
		for {
			var v_4 = env.Limit - env.Cursor
		golab4:
			for {
				var v_5 = env.Limit - env.Cursor
			lab5:
				for {
					if !env.InGroupingB(G_vowel, 97, 305) {
						break lab5
					}
					env.Cursor = env.Limit - v_5
					break golab4
				}
				env.Cursor = env.Limit - v_5
				if env.Cursor <= env.LimitBackward {
					break lab3
				}
				env.PrevChar()
			}
		lab6:
			for {
				var v_6 = env.Limit - env.Cursor
			lab7:
				for {
					if !env.EqSB("a") {
						break lab7
					}
					break lab6
				}
				env.Cursor = env.Limit - v_6
				if !env.EqSB("\u0131") {
					break lab3
				}
				break lab6
			}
			env.Cursor = env.Limit - v_4
			{
				var c = env.Cursor
				bra, ket := env.Cursor, env.Cursor
				env.Insert(bra, ket, "\u0131")
				env.Cursor = c
			}
			break lab2
		}
		env.Cursor = env.Limit - v_3
	lab8:
		for {
			var v_7 = env.Limit - env.Cursor
		golab9:
			for {
				var v_8 = env.Limit - env.Cursor
			lab10:
				for {
					if !env.InGroupingB(G_vowel, 97, 305) {
						break lab10
					}
					env.Cursor = env.Limit - v_8
					break golab9
				}
				env.Cursor = env.Limit - v_8
				if env.Cursor <= env.LimitBackward {
					break lab8
				}
				env.PrevChar()
			}
		lab11:
			for {
				var v_9 = env.Limit - env.Cursor
			lab12:
				for {
					if !env.EqSB("e") {
						break lab12
					}
					break lab11
				}
				env.Cursor = env.Limit - v_9
				if !env.EqSB("i") {
					break lab8
				}
				break lab11
			}
			env.Cursor = env.Limit - v_7
			{
				var c = env.Cursor
				bra, ket := env.Cursor, env.Cursor
				env.Insert(bra, ket, "i")
				env.Cursor = c
			}
			break lab2
		}
		env.Cursor = env.Limit - v_3
	lab13:
		for {
			var v_10 = env.Limit - env.Cursor
		golab14:
			for {
				var v_11 = env.Limit - env.Cursor
			lab15:
				for {
					if !env.InGroupingB(G_vowel, 97, 305) {
						break lab15
					}
					env.Cursor = env.Limit - v_11
					break golab14
				}
				env.Cursor = env.Limit - v_11
				if env.Cursor <= env.LimitBackward {
					break lab13
				}
				env.PrevChar()
			}
		lab16:
			for {
				var v_12 = env.Limit - env.Cursor
			lab17:
				for {
					if !env.EqSB("o") {
						break lab17
					}
					break lab16
				}
				env.Cursor = env.Limit - v_12
				if !env.EqSB("u") {
					break lab13
				}
				break lab16
			}
			env.Cursor = env.Limit - v_10
			{
				var c = env.Cursor
				bra, ket := env.Cursor, env.Cursor
				env.Insert(bra, ket, "u")
				env.Cursor = c
			}
			break lab2
		}
		env.Cursor = env.Limit - v_3
		var v_13 = env.Limit - env.Cursor
	golab18:
		for {
			var v_14 = env.Limit - env.Cursor
		lab19:
			for {
				if !env.InGroupingB(G_vowel, 97, 305) {
					break lab19
				}
				env.Cursor = env.Limit - v_14
				break golab18
			}
			env.Cursor = env.Limit - v_14
			if env.Cursor <= env.LimitBackward {
				return false
			}
			env.PrevChar()
		}
	lab20:
		for {
			var v_15 = env.Limit - env.Cursor
		lab21:
			for {
				if !env.EqSB("\u00F6") {
					break lab21
				}
				break lab20
			}
			env.Cursor = env.Limit - v_15
			if !env.EqSB("\u00FC") {
				return false
			}
			break lab20
		}
		env.Cursor = env.Limit - v_13
		{
			var c = env.Cursor
			bra, ket := env.Cursor, env.Cursor
			env.Insert(bra, ket, "\u00FC")
			env.Cursor = c
		}
		break lab2
	}
	return true
}

func r_is_reserved_word(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !env.EqSB("ad") {
		return false
	}
	var v_1 = env.Limit - env.Cursor
lab0:
	for {
		if !env.EqSB("soy") {
			env.Cursor = env.Limit - v_1
			break lab0
		}
		break lab0
	}
	if env.Cursor > env.LimitBackward {
		return false
	}
	return true
}

func r_more_than_one_syllable_word(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var v_1 = env.Cursor
	var v_2 = 2
replab0:
	for {
		var v_3 = env.Cursor
	lab1:
		for range [2]struct{}{} {
		golab2:
			for {
			lab3:
				for {
					if !env.InGrouping(G_vowel, 97, 305) {
						break lab3
					}
					break golab2
				}
				if env.Cursor >= env.Limit {
					break lab1
				}
				env.NextChar()
			}
			v_2--
			continue replab0
		}
		env.Cursor = v_3
		break replab0
	}
	if v_2 > 0 {
		return false
	}
	env.Cursor = v_1
	return true
}

func r_postlude(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	env.LimitBackward = env.Cursor
	env.Cursor = env.Limit
	var v_1 = env.Limit - env.Cursor
lab0:
	for {
		if !r_is_reserved_word(env, context) {
			break lab0
		}
		return false
	}
	env.Cursor = env.Limit - v_1
	var v_2 = env.Limit - env.Cursor
	r_append_U_to_stems_ending_with_d_or_g(env, context)
	env.Cursor = env.Limit - v_2
	var v_3 = env.Limit - env.Cursor
	r_post_process_last_consonants(env, context)
	env.Cursor = env.Limit - v_3
	env.Cursor = env.LimitBackward
	return true
}

func Stem(env *snowballRuntime.Env) bool {
	var context = &Context{
		b_continue_stemming_noun_suffixes: false,
	}
	_ = context
	if !r_more_than_one_syllable_word(env, context) {
		return false
	}
	env.LimitBackward = env.Cursor
	env.Cursor = env.Limit
	var v_1 = env.Limit - env.Cursor
	r_stem_nominal_verb_suffixes(env, context)
	env.Cursor = env.Limit - v_1
	if !context.b_continue_stemming_noun_suffixes {
		return false
	}
	var v_2 = env.Limit - env.Cursor
	r_stem_noun_suffixes(env, context)
	env.Cursor = env.Limit - v_2
	env.Cursor = env.LimitBackward
	if !r_postlude(env, context) {
		return false
	}
	return true
}
