//! Generated by Snowball 2.0.0 - https://snowballstem.org/

package catalan

import (
	snowballRuntime "github.com/blevesearch/snowballstem"
)

var A_0 = []*snowballRuntime.Among{
	{Str: "", A: -1, B: 7, F: nil},
	{Str: "\u00B7", A: 0, B: 6, F: nil},
	{Str: "\u00E0", A: 0, B: 1, F: nil},
	{Str: "\u00E1", A: 0, B: 1, F: nil},
	{Str: "\u00E8", A: 0, B: 2, F: nil},
	{Str: "\u00E9", A: 0, B: 2, F: nil},
	{Str: "\u00EC", A: 0, B: 3, F: nil},
	{Str: "\u00ED", A: 0, B: 3, F: nil},
	{Str: "\u00EF", A: 0, B: 3, F: nil},
	{Str: "\u00F2", A: 0, B: 4, F: nil},
	{Str: "\u00F3", A: 0, B: 4, F: nil},
	{Str: "\u00FA", A: 0, B: 5, F: nil},
	{Str: "\u00FC", A: 0, B: 5, F: nil},
}

var A_1 = []*snowballRuntime.Among{
	{Str: "la", A: -1, B: 1, F: nil},
	{Str: "-la", A: 0, B: 1, F: nil},
	{Str: "sela", A: 0, B: 1, F: nil},
	{Str: "le", A: -1, B: 1, F: nil},
	{Str: "me", A: -1, B: 1, F: nil},
	{Str: "-me", A: 4, B: 1, F: nil},
	{Str: "se", A: -1, B: 1, F: nil},
	{Str: "-te", A: -1, B: 1, F: nil},
	{Str: "hi", A: -1, B: 1, F: nil},
	{Str: "'hi", A: 8, B: 1, F: nil},
	{Str: "li", A: -1, B: 1, F: nil},
	{Str: "-li", A: 10, B: 1, F: nil},
	{Str: "'l", A: -1, B: 1, F: nil},
	{Str: "'m", A: -1, B: 1, F: nil},
	{Str: "-m", A: -1, B: 1, F: nil},
	{Str: "'n", A: -1, B: 1, F: nil},
	{Str: "-n", A: -1, B: 1, F: nil},
	{Str: "ho", A: -1, B: 1, F: nil},
	{Str: "'ho", A: 17, B: 1, F: nil},
	{Str: "lo", A: -1, B: 1, F: nil},
	{Str: "selo", A: 19, B: 1, F: nil},
	{Str: "'s", A: -1, B: 1, F: nil},
	{Str: "las", A: -1, B: 1, F: nil},
	{Str: "selas", A: 22, B: 1, F: nil},
	{Str: "les", A: -1, B: 1, F: nil},
	{Str: "-les", A: 24, B: 1, F: nil},
	{Str: "'ls", A: -1, B: 1, F: nil},
	{Str: "-ls", A: -1, B: 1, F: nil},
	{Str: "'ns", A: -1, B: 1, F: nil},
	{Str: "-ns", A: -1, B: 1, F: nil},
	{Str: "ens", A: -1, B: 1, F: nil},
	{Str: "los", A: -1, B: 1, F: nil},
	{Str: "selos", A: 31, B: 1, F: nil},
	{Str: "nos", A: -1, B: 1, F: nil},
	{Str: "-nos", A: 33, B: 1, F: nil},
	{Str: "vos", A: -1, B: 1, F: nil},
	{Str: "us", A: -1, B: 1, F: nil},
	{Str: "-us", A: 36, B: 1, F: nil},
	{Str: "'t", A: -1, B: 1, F: nil},
}

var A_2 = []*snowballRuntime.Among{
	{Str: "ica", A: -1, B: 4, F: nil},
	{Str: "l\u00F3gica", A: 0, B: 3, F: nil},
	{Str: "enca", A: -1, B: 1, F: nil},
	{Str: "ada", A: -1, B: 2, F: nil},
	{Str: "ancia", A: -1, B: 1, F: nil},
	{Str: "encia", A: -1, B: 1, F: nil},
	{Str: "\u00E8ncia", A: -1, B: 1, F: nil},
	{Str: "\u00EDcia", A: -1, B: 1, F: nil},
	{Str: "logia", A: -1, B: 3, F: nil},
	{Str: "inia", A: -1, B: 1, F: nil},
	{Str: "\u00EDinia", A: 9, B: 1, F: nil},
	{Str: "eria", A: -1, B: 1, F: nil},
	{Str: "\u00E0ria", A: -1, B: 1, F: nil},
	{Str: "at\u00F2ria", A: -1, B: 1, F: nil},
	{Str: "alla", A: -1, B: 1, F: nil},
	{Str: "ella", A: -1, B: 1, F: nil},
	{Str: "\u00EDvola", A: -1, B: 1, F: nil},
	{Str: "ima", A: -1, B: 1, F: nil},
	{Str: "\u00EDssima", A: 17, B: 1, F: nil},
	{Str: "qu\u00EDssima", A: 18, B: 5, F: nil},
	{Str: "ana", A: -1, B: 1, F: nil},
	{Str: "ina", A: -1, B: 1, F: nil},
	{Str: "era", A: -1, B: 1, F: nil},
	{Str: "sfera", A: 22, B: 1, F: nil},
	{Str: "ora", A: -1, B: 1, F: nil},
	{Str: "dora", A: 24, B: 1, F: nil},
	{Str: "adora", A: 25, B: 1, F: nil},
	{Str: "adura", A: -1, B: 1, F: nil},
	{Str: "esa", A: -1, B: 1, F: nil},
	{Str: "osa", A: -1, B: 1, F: nil},
	{Str: "assa", A: -1, B: 1, F: nil},
	{Str: "essa", A: -1, B: 1, F: nil},
	{Str: "issa", A: -1, B: 1, F: nil},
	{Str: "eta", A: -1, B: 1, F: nil},
	{Str: "ita", A: -1, B: 1, F: nil},
	{Str: "ota", A: -1, B: 1, F: nil},
	{Str: "ista", A: -1, B: 1, F: nil},
	{Str: "ialista", A: 36, B: 1, F: nil},
	{Str: "ionista", A: 36, B: 1, F: nil},
	{Str: "iva", A: -1, B: 1, F: nil},
	{Str: "ativa", A: 39, B: 1, F: nil},
	{Str: "n\u00E7a", A: -1, B: 1, F: nil},
	{Str: "log\u00EDa", A: -1, B: 3, F: nil},
	{Str: "ic", A: -1, B: 4, F: nil},
	{Str: "\u00EDstic", A: 43, B: 1, F: nil},
	{Str: "enc", A: -1, B: 1, F: nil},
	{Str: "esc", A: -1, B: 1, F: nil},
	{Str: "ud", A: -1, B: 1, F: nil},
	{Str: "atge", A: -1, B: 1, F: nil},
	{Str: "ble", A: -1, B: 1, F: nil},
	{Str: "able", A: 49, B: 1, F: nil},
	{Str: "ible", A: 49, B: 1, F: nil},
	{Str: "isme", A: -1, B: 1, F: nil},
	{Str: "ialisme", A: 52, B: 1, F: nil},
	{Str: "ionisme", A: 52, B: 1, F: nil},
	{Str: "ivisme", A: 52, B: 1, F: nil},
	{Str: "aire", A: -1, B: 1, F: nil},
	{Str: "icte", A: -1, B: 1, F: nil},
	{Str: "iste", A: -1, B: 1, F: nil},
	{Str: "ici", A: -1, B: 1, F: nil},
	{Str: "\u00EDci", A: -1, B: 1, F: nil},
	{Str: "logi", A: -1, B: 3, F: nil},
	{Str: "ari", A: -1, B: 1, F: nil},
	{Str: "tori", A: -1, B: 1, F: nil},
	{Str: "al", A: -1, B: 1, F: nil},
	{Str: "il", A: -1, B: 1, F: nil},
	{Str: "all", A: -1, B: 1, F: nil},
	{Str: "ell", A: -1, B: 1, F: nil},
	{Str: "\u00EDvol", A: -1, B: 1, F: nil},
	{Str: "isam", A: -1, B: 1, F: nil},
	{Str: "issem", A: -1, B: 1, F: nil},
	{Str: "\u00ECssem", A: -1, B: 1, F: nil},
	{Str: "\u00EDssem", A: -1, B: 1, F: nil},
	{Str: "\u00EDssim", A: -1, B: 1, F: nil},
	{Str: "qu\u00EDssim", A: 73, B: 5, F: nil},
	{Str: "amen", A: -1, B: 1, F: nil},
	{Str: "\u00ECssin", A: -1, B: 1, F: nil},
	{Str: "ar", A: -1, B: 1, F: nil},
	{Str: "ificar", A: 77, B: 1, F: nil},
	{Str: "egar", A: 77, B: 1, F: nil},
	{Str: "ejar", A: 77, B: 1, F: nil},
	{Str: "itar", A: 77, B: 1, F: nil},
	{Str: "itzar", A: 77, B: 1, F: nil},
	{Str: "fer", A: -1, B: 1, F: nil},
	{Str: "or", A: -1, B: 1, F: nil},
	{Str: "dor", A: 84, B: 1, F: nil},
	{Str: "dur", A: -1, B: 1, F: nil},
	{Str: "doras", A: -1, B: 1, F: nil},
	{Str: "ics", A: -1, B: 4, F: nil},
	{Str: "l\u00F3gics", A: 88, B: 3, F: nil},
	{Str: "uds", A: -1, B: 1, F: nil},
	{Str: "nces", A: -1, B: 1, F: nil},
	{Str: "ades", A: -1, B: 2, F: nil},
	{Str: "ancies", A: -1, B: 1, F: nil},
	{Str: "encies", A: -1, B: 1, F: nil},
	{Str: "\u00E8ncies", A: -1, B: 1, F: nil},
	{Str: "\u00EDcies", A: -1, B: 1, F: nil},
	{Str: "logies", A: -1, B: 3, F: nil},
	{Str: "inies", A: -1, B: 1, F: nil},
	{Str: "\u00EDnies", A: -1, B: 1, F: nil},
	{Str: "eries", A: -1, B: 1, F: nil},
	{Str: "\u00E0ries", A: -1, B: 1, F: nil},
	{Str: "at\u00F2ries", A: -1, B: 1, F: nil},
	{Str: "bles", A: -1, B: 1, F: nil},
	{Str: "ables", A: 103, B: 1, F: nil},
	{Str: "ibles", A: 103, B: 1, F: nil},
	{Str: "imes", A: -1, B: 1, F: nil},
	{Str: "\u00EDssimes", A: 106, B: 1, F: nil},
	{Str: "qu\u00EDssimes", A: 107, B: 5, F: nil},
	{Str: "formes", A: -1, B: 1, F: nil},
	{Str: "ismes", A: -1, B: 1, F: nil},
	{Str: "ialismes", A: 110, B: 1, F: nil},
	{Str: "ines", A: -1, B: 1, F: nil},
	{Str: "eres", A: -1, B: 1, F: nil},
	{Str: "ores", A: -1, B: 1, F: nil},
	{Str: "dores", A: 114, B: 1, F: nil},
	{Str: "idores", A: 115, B: 1, F: nil},
	{Str: "dures", A: -1, B: 1, F: nil},
	{Str: "eses", A: -1, B: 1, F: nil},
	{Str: "oses", A: -1, B: 1, F: nil},
	{Str: "asses", A: -1, B: 1, F: nil},
	{Str: "ictes", A: -1, B: 1, F: nil},
	{Str: "ites", A: -1, B: 1, F: nil},
	{Str: "otes", A: -1, B: 1, F: nil},
	{Str: "istes", A: -1, B: 1, F: nil},
	{Str: "ialistes", A: 124, B: 1, F: nil},
	{Str: "ionistes", A: 124, B: 1, F: nil},
	{Str: "iques", A: -1, B: 4, F: nil},
	{Str: "l\u00F3giques", A: 127, B: 3, F: nil},
	{Str: "ives", A: -1, B: 1, F: nil},
	{Str: "atives", A: 129, B: 1, F: nil},
	{Str: "log\u00EDes", A: -1, B: 3, F: nil},
	{Str: "alleng\u00FCes", A: -1, B: 1, F: nil},
	{Str: "icis", A: -1, B: 1, F: nil},
	{Str: "\u00EDcis", A: -1, B: 1, F: nil},
	{Str: "logis", A: -1, B: 3, F: nil},
	{Str: "aris", A: -1, B: 1, F: nil},
	{Str: "toris", A: -1, B: 1, F: nil},
	{Str: "ls", A: -1, B: 1, F: nil},
	{Str: "als", A: 138, B: 1, F: nil},
	{Str: "ells", A: 138, B: 1, F: nil},
	{Str: "ims", A: -1, B: 1, F: nil},
	{Str: "\u00EDssims", A: 141, B: 1, F: nil},
	{Str: "qu\u00EDssims", A: 142, B: 5, F: nil},
	{Str: "ions", A: -1, B: 1, F: nil},
	{Str: "cions", A: 144, B: 1, F: nil},
	{Str: "acions", A: 145, B: 2, F: nil},
	{Str: "esos", A: -1, B: 1, F: nil},
	{Str: "osos", A: -1, B: 1, F: nil},
	{Str: "assos", A: -1, B: 1, F: nil},
	{Str: "issos", A: -1, B: 1, F: nil},
	{Str: "ers", A: -1, B: 1, F: nil},
	{Str: "ors", A: -1, B: 1, F: nil},
	{Str: "dors", A: 152, B: 1, F: nil},
	{Str: "adors", A: 153, B: 1, F: nil},
	{Str: "idors", A: 153, B: 1, F: nil},
	{Str: "ats", A: -1, B: 1, F: nil},
	{Str: "itats", A: 156, B: 1, F: nil},
	{Str: "bilitats", A: 157, B: 1, F: nil},
	{Str: "ivitats", A: 157, B: 1, F: nil},
	{Str: "ativitats", A: 159, B: 1, F: nil},
	{Str: "\u00EFtats", A: 156, B: 1, F: nil},
	{Str: "ets", A: -1, B: 1, F: nil},
	{Str: "ants", A: -1, B: 1, F: nil},
	{Str: "ents", A: -1, B: 1, F: nil},
	{Str: "ments", A: 164, B: 1, F: nil},
	{Str: "aments", A: 165, B: 1, F: nil},
	{Str: "ots", A: -1, B: 1, F: nil},
	{Str: "uts", A: -1, B: 1, F: nil},
	{Str: "ius", A: -1, B: 1, F: nil},
	{Str: "trius", A: 169, B: 1, F: nil},
	{Str: "atius", A: 169, B: 1, F: nil},
	{Str: "\u00E8s", A: -1, B: 1, F: nil},
	{Str: "\u00E9s", A: -1, B: 1, F: nil},
	{Str: "\u00EDs", A: -1, B: 1, F: nil},
	{Str: "d\u00EDs", A: 174, B: 1, F: nil},
	{Str: "\u00F3s", A: -1, B: 1, F: nil},
	{Str: "itat", A: -1, B: 1, F: nil},
	{Str: "bilitat", A: 177, B: 1, F: nil},
	{Str: "ivitat", A: 177, B: 1, F: nil},
	{Str: "ativitat", A: 179, B: 1, F: nil},
	{Str: "\u00EFtat", A: -1, B: 1, F: nil},
	{Str: "et", A: -1, B: 1, F: nil},
	{Str: "ant", A: -1, B: 1, F: nil},
	{Str: "ent", A: -1, B: 1, F: nil},
	{Str: "ient", A: 184, B: 1, F: nil},
	{Str: "ment", A: 184, B: 1, F: nil},
	{Str: "ament", A: 186, B: 1, F: nil},
	{Str: "isament", A: 187, B: 1, F: nil},
	{Str: "ot", A: -1, B: 1, F: nil},
	{Str: "isseu", A: -1, B: 1, F: nil},
	{Str: "\u00ECsseu", A: -1, B: 1, F: nil},
	{Str: "\u00EDsseu", A: -1, B: 1, F: nil},
	{Str: "triu", A: -1, B: 1, F: nil},
	{Str: "\u00EDssiu", A: -1, B: 1, F: nil},
	{Str: "atiu", A: -1, B: 1, F: nil},
	{Str: "\u00F3", A: -1, B: 1, F: nil},
	{Str: "i\u00F3", A: 196, B: 1, F: nil},
	{Str: "ci\u00F3", A: 197, B: 1, F: nil},
	{Str: "aci\u00F3", A: 198, B: 1, F: nil},
}

var A_3 = []*snowballRuntime.Among{
	{Str: "aba", A: -1, B: 1, F: nil},
	{Str: "esca", A: -1, B: 1, F: nil},
	{Str: "isca", A: -1, B: 1, F: nil},
	{Str: "\u00EFsca", A: -1, B: 1, F: nil},
	{Str: "ada", A: -1, B: 1, F: nil},
	{Str: "ida", A: -1, B: 1, F: nil},
	{Str: "uda", A: -1, B: 1, F: nil},
	{Str: "\u00EFda", A: -1, B: 1, F: nil},
	{Str: "ia", A: -1, B: 1, F: nil},
	{Str: "aria", A: 8, B: 1, F: nil},
	{Str: "iria", A: 8, B: 1, F: nil},
	{Str: "ara", A: -1, B: 1, F: nil},
	{Str: "iera", A: -1, B: 1, F: nil},
	{Str: "ira", A: -1, B: 1, F: nil},
	{Str: "adora", A: -1, B: 1, F: nil},
	{Str: "\u00EFra", A: -1, B: 1, F: nil},
	{Str: "ava", A: -1, B: 1, F: nil},
	{Str: "ixa", A: -1, B: 1, F: nil},
	{Str: "itza", A: -1, B: 1, F: nil},
	{Str: "\u00EDa", A: -1, B: 1, F: nil},
	{Str: "ar\u00EDa", A: 19, B: 1, F: nil},
	{Str: "er\u00EDa", A: 19, B: 1, F: nil},
	{Str: "ir\u00EDa", A: 19, B: 1, F: nil},
	{Str: "\u00EFa", A: -1, B: 1, F: nil},
	{Str: "isc", A: -1, B: 1, F: nil},
	{Str: "\u00EFsc", A: -1, B: 1, F: nil},
	{Str: "ad", A: -1, B: 1, F: nil},
	{Str: "ed", A: -1, B: 1, F: nil},
	{Str: "id", A: -1, B: 1, F: nil},
	{Str: "ie", A: -1, B: 1, F: nil},
	{Str: "re", A: -1, B: 1, F: nil},
	{Str: "dre", A: 30, B: 1, F: nil},
	{Str: "ase", A: -1, B: 1, F: nil},
	{Str: "iese", A: -1, B: 1, F: nil},
	{Str: "aste", A: -1, B: 1, F: nil},
	{Str: "iste", A: -1, B: 1, F: nil},
	{Str: "ii", A: -1, B: 1, F: nil},
	{Str: "ini", A: -1, B: 1, F: nil},
	{Str: "esqui", A: -1, B: 1, F: nil},
	{Str: "eixi", A: -1, B: 1, F: nil},
	{Str: "itzi", A: -1, B: 1, F: nil},
	{Str: "am", A: -1, B: 1, F: nil},
	{Str: "em", A: -1, B: 1, F: nil},
	{Str: "arem", A: 42, B: 1, F: nil},
	{Str: "irem", A: 42, B: 1, F: nil},
	{Str: "\u00E0rem", A: 42, B: 1, F: nil},
	{Str: "\u00EDrem", A: 42, B: 1, F: nil},
	{Str: "\u00E0ssem", A: 42, B: 1, F: nil},
	{Str: "\u00E9ssem", A: 42, B: 1, F: nil},
	{Str: "iguem", A: 42, B: 1, F: nil},
	{Str: "\u00EFguem", A: 42, B: 1, F: nil},
	{Str: "avem", A: 42, B: 1, F: nil},
	{Str: "\u00E0vem", A: 42, B: 1, F: nil},
	{Str: "\u00E1vem", A: 42, B: 1, F: nil},
	{Str: "ir\u00ECem", A: 42, B: 1, F: nil},
	{Str: "\u00EDem", A: 42, B: 1, F: nil},
	{Str: "ar\u00EDem", A: 55, B: 1, F: nil},
	{Str: "ir\u00EDem", A: 55, B: 1, F: nil},
	{Str: "assim", A: -1, B: 1, F: nil},
	{Str: "essim", A: -1, B: 1, F: nil},
	{Str: "issim", A: -1, B: 1, F: nil},
	{Str: "\u00E0ssim", A: -1, B: 1, F: nil},
	{Str: "\u00E8ssim", A: -1, B: 1, F: nil},
	{Str: "\u00E9ssim", A: -1, B: 1, F: nil},
	{Str: "\u00EDssim", A: -1, B: 1, F: nil},
	{Str: "\u00EFm", A: -1, B: 1, F: nil},
	{Str: "an", A: -1, B: 1, F: nil},
	{Str: "aban", A: 66, B: 1, F: nil},
	{Str: "arian", A: 66, B: 1, F: nil},
	{Str: "aran", A: 66, B: 1, F: nil},
	{Str: "ieran", A: 66, B: 1, F: nil},
	{Str: "iran", A: 66, B: 1, F: nil},
	{Str: "\u00EDan", A: 66, B: 1, F: nil},
	{Str: "ar\u00EDan", A: 72, B: 1, F: nil},
	{Str: "er\u00EDan", A: 72, B: 1, F: nil},
	{Str: "ir\u00EDan", A: 72, B: 1, F: nil},
	{Str: "en", A: -1, B: 1, F: nil},
	{Str: "ien", A: 76, B: 1, F: nil},
	{Str: "arien", A: 77, B: 1, F: nil},
	{Str: "irien", A: 77, B: 1, F: nil},
	{Str: "aren", A: 76, B: 1, F: nil},
	{Str: "eren", A: 76, B: 1, F: nil},
	{Str: "iren", A: 76, B: 1, F: nil},
	{Str: "\u00E0ren", A: 76, B: 1, F: nil},
	{Str: "\u00EFren", A: 76, B: 1, F: nil},
	{Str: "asen", A: 76, B: 1, F: nil},
	{Str: "iesen", A: 76, B: 1, F: nil},
	{Str: "assen", A: 76, B: 1, F: nil},
	{Str: "essen", A: 76, B: 1, F: nil},
	{Str: "issen", A: 76, B: 1, F: nil},
	{Str: "\u00E9ssen", A: 76, B: 1, F: nil},
	{Str: "\u00EFssen", A: 76, B: 1, F: nil},
	{Str: "esquen", A: 76, B: 1, F: nil},
	{Str: "isquen", A: 76, B: 1, F: nil},
	{Str: "\u00EFsquen", A: 76, B: 1, F: nil},
	{Str: "aven", A: 76, B: 1, F: nil},
	{Str: "ixen", A: 76, B: 1, F: nil},
	{Str: "eixen", A: 96, B: 1, F: nil},
	{Str: "\u00EFxen", A: 76, B: 1, F: nil},
	{Str: "\u00EFen", A: 76, B: 1, F: nil},
	{Str: "in", A: -1, B: 1, F: nil},
	{Str: "inin", A: 100, B: 1, F: nil},
	{Str: "sin", A: 100, B: 1, F: nil},
	{Str: "isin", A: 102, B: 1, F: nil},
	{Str: "assin", A: 102, B: 1, F: nil},
	{Str: "essin", A: 102, B: 1, F: nil},
	{Str: "issin", A: 102, B: 1, F: nil},
	{Str: "\u00EFssin", A: 102, B: 1, F: nil},
	{Str: "esquin", A: 100, B: 1, F: nil},
	{Str: "eixin", A: 100, B: 1, F: nil},
	{Str: "aron", A: -1, B: 1, F: nil},
	{Str: "ieron", A: -1, B: 1, F: nil},
	{Str: "ar\u00E1n", A: -1, B: 1, F: nil},
	{Str: "er\u00E1n", A: -1, B: 1, F: nil},
	{Str: "ir\u00E1n", A: -1, B: 1, F: nil},
	{Str: "i\u00EFn", A: -1, B: 1, F: nil},
	{Str: "ado", A: -1, B: 1, F: nil},
	{Str: "ido", A: -1, B: 1, F: nil},
	{Str: "ando", A: -1, B: 2, F: nil},
	{Str: "iendo", A: -1, B: 1, F: nil},
	{Str: "io", A: -1, B: 1, F: nil},
	{Str: "ixo", A: -1, B: 1, F: nil},
	{Str: "eixo", A: 121, B: 1, F: nil},
	{Str: "\u00EFxo", A: -1, B: 1, F: nil},
	{Str: "itzo", A: -1, B: 1, F: nil},
	{Str: "ar", A: -1, B: 1, F: nil},
	{Str: "tzar", A: 125, B: 1, F: nil},
	{Str: "er", A: -1, B: 1, F: nil},
	{Str: "eixer", A: 127, B: 1, F: nil},
	{Str: "ir", A: -1, B: 1, F: nil},
	{Str: "ador", A: -1, B: 1, F: nil},
	{Str: "as", A: -1, B: 1, F: nil},
	{Str: "abas", A: 131, B: 1, F: nil},
	{Str: "adas", A: 131, B: 1, F: nil},
	{Str: "idas", A: 131, B: 1, F: nil},
	{Str: "aras", A: 131, B: 1, F: nil},
	{Str: "ieras", A: 131, B: 1, F: nil},
	{Str: "\u00EDas", A: 131, B: 1, F: nil},
	{Str: "ar\u00EDas", A: 137, B: 1, F: nil},
	{Str: "er\u00EDas", A: 137, B: 1, F: nil},
	{Str: "ir\u00EDas", A: 137, B: 1, F: nil},
	{Str: "ids", A: -1, B: 1, F: nil},
	{Str: "es", A: -1, B: 1, F: nil},
	{Str: "ades", A: 142, B: 1, F: nil},
	{Str: "ides", A: 142, B: 1, F: nil},
	{Str: "udes", A: 142, B: 1, F: nil},
	{Str: "\u00EFdes", A: 142, B: 1, F: nil},
	{Str: "atges", A: 142, B: 1, F: nil},
	{Str: "ies", A: 142, B: 1, F: nil},
	{Str: "aries", A: 148, B: 1, F: nil},
	{Str: "iries", A: 148, B: 1, F: nil},
	{Str: "ares", A: 142, B: 1, F: nil},
	{Str: "ires", A: 142, B: 1, F: nil},
	{Str: "adores", A: 142, B: 1, F: nil},
	{Str: "\u00EFres", A: 142, B: 1, F: nil},
	{Str: "ases", A: 142, B: 1, F: nil},
	{Str: "ieses", A: 142, B: 1, F: nil},
	{Str: "asses", A: 142, B: 1, F: nil},
	{Str: "esses", A: 142, B: 1, F: nil},
	{Str: "isses", A: 142, B: 1, F: nil},
	{Str: "\u00EFsses", A: 142, B: 1, F: nil},
	{Str: "ques", A: 142, B: 1, F: nil},
	{Str: "esques", A: 161, B: 1, F: nil},
	{Str: "\u00EFsques", A: 161, B: 1, F: nil},
	{Str: "aves", A: 142, B: 1, F: nil},
	{Str: "ixes", A: 142, B: 1, F: nil},
	{Str: "eixes", A: 165, B: 1, F: nil},
	{Str: "\u00EFxes", A: 142, B: 1, F: nil},
	{Str: "\u00EFes", A: 142, B: 1, F: nil},
	{Str: "abais", A: -1, B: 1, F: nil},
	{Str: "arais", A: -1, B: 1, F: nil},
	{Str: "ierais", A: -1, B: 1, F: nil},
	{Str: "\u00EDais", A: -1, B: 1, F: nil},
	{Str: "ar\u00EDais", A: 172, B: 1, F: nil},
	{Str: "er\u00EDais", A: 172, B: 1, F: nil},
	{Str: "ir\u00EDais", A: 172, B: 1, F: nil},
	{Str: "aseis", A: -1, B: 1, F: nil},
	{Str: "ieseis", A: -1, B: 1, F: nil},
	{Str: "asteis", A: -1, B: 1, F: nil},
	{Str: "isteis", A: -1, B: 1, F: nil},
	{Str: "inis", A: -1, B: 1, F: nil},
	{Str: "sis", A: -1, B: 1, F: nil},
	{Str: "isis", A: 181, B: 1, F: nil},
	{Str: "assis", A: 181, B: 1, F: nil},
	{Str: "essis", A: 181, B: 1, F: nil},
	{Str: "issis", A: 181, B: 1, F: nil},
	{Str: "\u00EFssis", A: 181, B: 1, F: nil},
	{Str: "esquis", A: -1, B: 1, F: nil},
	{Str: "eixis", A: -1, B: 1, F: nil},
	{Str: "itzis", A: -1, B: 1, F: nil},
	{Str: "\u00E1is", A: -1, B: 1, F: nil},
	{Str: "ar\u00E9is", A: -1, B: 1, F: nil},
	{Str: "er\u00E9is", A: -1, B: 1, F: nil},
	{Str: "ir\u00E9is", A: -1, B: 1, F: nil},
	{Str: "ams", A: -1, B: 1, F: nil},
	{Str: "ados", A: -1, B: 1, F: nil},
	{Str: "idos", A: -1, B: 1, F: nil},
	{Str: "amos", A: -1, B: 1, F: nil},
	{Str: "\u00E1bamos", A: 197, B: 1, F: nil},
	{Str: "\u00E1ramos", A: 197, B: 1, F: nil},
	{Str: "i\u00E9ramos", A: 197, B: 1, F: nil},
	{Str: "\u00EDamos", A: 197, B: 1, F: nil},
	{Str: "ar\u00EDamos", A: 201, B: 1, F: nil},
	{Str: "er\u00EDamos", A: 201, B: 1, F: nil},
	{Str: "ir\u00EDamos", A: 201, B: 1, F: nil},
	{Str: "aremos", A: -1, B: 1, F: nil},
	{Str: "eremos", A: -1, B: 1, F: nil},
	{Str: "iremos", A: -1, B: 1, F: nil},
	{Str: "\u00E1semos", A: -1, B: 1, F: nil},
	{Str: "i\u00E9semos", A: -1, B: 1, F: nil},
	{Str: "imos", A: -1, B: 1, F: nil},
	{Str: "adors", A: -1, B: 1, F: nil},
	{Str: "ass", A: -1, B: 1, F: nil},
	{Str: "erass", A: 212, B: 1, F: nil},
	{Str: "ess", A: -1, B: 1, F: nil},
	{Str: "ats", A: -1, B: 1, F: nil},
	{Str: "its", A: -1, B: 1, F: nil},
	{Str: "ents", A: -1, B: 1, F: nil},
	{Str: "\u00E0s", A: -1, B: 1, F: nil},
	{Str: "ar\u00E0s", A: 218, B: 1, F: nil},
	{Str: "ir\u00E0s", A: 218, B: 1, F: nil},
	{Str: "ar\u00E1s", A: -1, B: 1, F: nil},
	{Str: "er\u00E1s", A: -1, B: 1, F: nil},
	{Str: "ir\u00E1s", A: -1, B: 1, F: nil},
	{Str: "\u00E9s", A: -1, B: 1, F: nil},
	{Str: "ar\u00E9s", A: 224, B: 1, F: nil},
	{Str: "\u00EDs", A: -1, B: 1, F: nil},
	{Str: "i\u00EFs", A: -1, B: 1, F: nil},
	{Str: "at", A: -1, B: 1, F: nil},
	{Str: "it", A: -1, B: 1, F: nil},
	{Str: "ant", A: -1, B: 1, F: nil},
	{Str: "ent", A: -1, B: 1, F: nil},
	{Str: "int", A: -1, B: 1, F: nil},
	{Str: "ut", A: -1, B: 1, F: nil},
	{Str: "\u00EFt", A: -1, B: 1, F: nil},
	{Str: "au", A: -1, B: 1, F: nil},
	{Str: "erau", A: 235, B: 1, F: nil},
	{Str: "ieu", A: -1, B: 1, F: nil},
	{Str: "ineu", A: -1, B: 1, F: nil},
	{Str: "areu", A: -1, B: 1, F: nil},
	{Str: "ireu", A: -1, B: 1, F: nil},
	{Str: "\u00E0reu", A: -1, B: 1, F: nil},
	{Str: "\u00EDreu", A: -1, B: 1, F: nil},
	{Str: "asseu", A: -1, B: 1, F: nil},
	{Str: "esseu", A: -1, B: 1, F: nil},
	{Str: "eresseu", A: 244, B: 1, F: nil},
	{Str: "\u00E0sseu", A: -1, B: 1, F: nil},
	{Str: "\u00E9sseu", A: -1, B: 1, F: nil},
	{Str: "igueu", A: -1, B: 1, F: nil},
	{Str: "\u00EFgueu", A: -1, B: 1, F: nil},
	{Str: "\u00E0veu", A: -1, B: 1, F: nil},
	{Str: "\u00E1veu", A: -1, B: 1, F: nil},
	{Str: "itzeu", A: -1, B: 1, F: nil},
	{Str: "\u00ECeu", A: -1, B: 1, F: nil},
	{Str: "ir\u00ECeu", A: 253, B: 1, F: nil},
	{Str: "\u00EDeu", A: -1, B: 1, F: nil},
	{Str: "ar\u00EDeu", A: 255, B: 1, F: nil},
	{Str: "ir\u00EDeu", A: 255, B: 1, F: nil},
	{Str: "assiu", A: -1, B: 1, F: nil},
	{Str: "issiu", A: -1, B: 1, F: nil},
	{Str: "\u00E0ssiu", A: -1, B: 1, F: nil},
	{Str: "\u00E8ssiu", A: -1, B: 1, F: nil},
	{Str: "\u00E9ssiu", A: -1, B: 1, F: nil},
	{Str: "\u00EDssiu", A: -1, B: 1, F: nil},
	{Str: "\u00EFu", A: -1, B: 1, F: nil},
	{Str: "ix", A: -1, B: 1, F: nil},
	{Str: "eix", A: 265, B: 1, F: nil},
	{Str: "\u00EFx", A: -1, B: 1, F: nil},
	{Str: "itz", A: -1, B: 1, F: nil},
	{Str: "i\u00E0", A: -1, B: 1, F: nil},
	{Str: "ar\u00E0", A: -1, B: 1, F: nil},
	{Str: "ir\u00E0", A: -1, B: 1, F: nil},
	{Str: "itz\u00E0", A: -1, B: 1, F: nil},
	{Str: "ar\u00E1", A: -1, B: 1, F: nil},
	{Str: "er\u00E1", A: -1, B: 1, F: nil},
	{Str: "ir\u00E1", A: -1, B: 1, F: nil},
	{Str: "ir\u00E8", A: -1, B: 1, F: nil},
	{Str: "ar\u00E9", A: -1, B: 1, F: nil},
	{Str: "er\u00E9", A: -1, B: 1, F: nil},
	{Str: "ir\u00E9", A: -1, B: 1, F: nil},
	{Str: "\u00ED", A: -1, B: 1, F: nil},
	{Str: "i\u00EF", A: -1, B: 1, F: nil},
	{Str: "i\u00F3", A: -1, B: 1, F: nil},
}

var A_4 = []*snowballRuntime.Among{
	{Str: "a", A: -1, B: 1, F: nil},
	{Str: "e", A: -1, B: 1, F: nil},
	{Str: "i", A: -1, B: 1, F: nil},
	{Str: "\u00EFn", A: -1, B: 1, F: nil},
	{Str: "o", A: -1, B: 1, F: nil},
	{Str: "ir", A: -1, B: 1, F: nil},
	{Str: "s", A: -1, B: 1, F: nil},
	{Str: "is", A: 6, B: 1, F: nil},
	{Str: "os", A: 6, B: 1, F: nil},
	{Str: "\u00EFs", A: 6, B: 1, F: nil},
	{Str: "it", A: -1, B: 1, F: nil},
	{Str: "eu", A: -1, B: 1, F: nil},
	{Str: "iu", A: -1, B: 1, F: nil},
	{Str: "iqu", A: -1, B: 2, F: nil},
	{Str: "itz", A: -1, B: 1, F: nil},
	{Str: "\u00E0", A: -1, B: 1, F: nil},
	{Str: "\u00E1", A: -1, B: 1, F: nil},
	{Str: "\u00E9", A: -1, B: 1, F: nil},
	{Str: "\u00EC", A: -1, B: 1, F: nil},
	{Str: "\u00ED", A: -1, B: 1, F: nil},
	{Str: "\u00EF", A: -1, B: 1, F: nil},
	{Str: "\u00F3", A: -1, B: 1, F: nil},
}

var G_v = []byte{17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 129, 81, 6, 10}

type Context struct {
	i_p2 int
	i_p1 int
}

func r_mark_regions(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	context.i_p1 = env.Limit
	context.i_p2 = env.Limit
	var v_1 = env.Cursor
lab0:
	for {
	golab1:
		for {
		lab2:
			for {
				if !env.InGrouping(G_v, 97, 252) {
					break lab2
				}
				break golab1
			}
			if env.Cursor >= env.Limit {
				break lab0
			}
			env.NextChar()
		}
	golab3:
		for {
		lab4:
			for {
				if !env.OutGrouping(G_v, 97, 252) {
					break lab4
				}
				break golab3
			}
			if env.Cursor >= env.Limit {
				break lab0
			}
			env.NextChar()
		}
		context.i_p1 = env.Cursor
	golab5:
		for {
		lab6:
			for {
				if !env.InGrouping(G_v, 97, 252) {
					break lab6
				}
				break golab5
			}
			if env.Cursor >= env.Limit {
				break lab0
			}
			env.NextChar()
		}
	golab7:
		for {
		lab8:
			for {
				if !env.OutGrouping(G_v, 97, 252) {
					break lab8
				}
				break golab7
			}
			if env.Cursor >= env.Limit {
				break lab0
			}
			env.NextChar()
		}
		context.i_p2 = env.Cursor
		break lab0
	}
	env.Cursor = v_1
	return true
}

func r_cleaning(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
replab0:
	for {
		var v_1 = env.Cursor
	lab1:
		for range [2]struct{}{} {
			env.Bra = env.Cursor
			among_var = env.FindAmong(A_0, context)
			if among_var == 0 {
				break lab1
			}
			env.Ket = env.Cursor
			if among_var == 1 {
				if !env.SliceFrom("a") {
					return false
				}
			} else if among_var == 2 {
				if !env.SliceFrom("e") {
					return false
				}
			} else if among_var == 3 {
				if !env.SliceFrom("i") {
					return false
				}
			} else if among_var == 4 {
				if !env.SliceFrom("o") {
					return false
				}
			} else if among_var == 5 {
				if !env.SliceFrom("u") {
					return false
				}
			} else if among_var == 6 {
				if !env.SliceFrom(".") {
					return false
				}
			} else if among_var == 7 {
				if env.Cursor >= env.Limit {
					break lab1
				}
				env.NextChar()
			}
			continue replab0
		}
		env.Cursor = v_1
		break replab0
	}
	return true
}

func r_R1(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !(context.i_p1 <= env.Cursor) {
		return false
	}
	return true
}

func r_R2(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !(context.i_p2 <= env.Cursor) {
		return false
	}
	return true
}

func r_attached_pronoun(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	env.Ket = env.Cursor
	if env.FindAmongB(A_1, context) == 0 {
		return false
	}
	env.Bra = env.Cursor
	if !r_R1(env, context) {
		return false
	}
	if !env.SliceDel() {
		return false
	}
	return true
}

func r_standard_suffix(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Ket = env.Cursor
	among_var = env.FindAmongB(A_2, context)
	if among_var == 0 {
		return false
	}
	env.Bra = env.Cursor
	if among_var == 1 {
		if !r_R1(env, context) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 2 {
		if !r_R2(env, context) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 3 {
		if !r_R2(env, context) {
			return false
		}
		if !env.SliceFrom("log") {
			return false
		}
	} else if among_var == 4 {
		if !r_R2(env, context) {
			return false
		}
		if !env.SliceFrom("ic") {
			return false
		}
	} else if among_var == 5 {
		if !r_R1(env, context) {
			return false
		}
		if !env.SliceFrom("c") {
			return false
		}
	}
	return true
}

func r_verb_suffix(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Ket = env.Cursor
	among_var = env.FindAmongB(A_3, context)
	if among_var == 0 {
		return false
	}
	env.Bra = env.Cursor
	if among_var == 1 {
		if !r_R1(env, context) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 2 {
		if !r_R2(env, context) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	}
	return true
}

func r_residual_suffix(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	env.Ket = env.Cursor
	among_var = env.FindAmongB(A_4, context)
	if among_var == 0 {
		return false
	}
	env.Bra = env.Cursor
	if among_var == 1 {
		if !r_R1(env, context) {
			return false
		}
		if !env.SliceDel() {
			return false
		}
	} else if among_var == 2 {
		if !r_R1(env, context) {
			return false
		}
		if !env.SliceFrom("ic") {
			return false
		}
	}
	return true
}

func Stem(env *snowballRuntime.Env) bool {
	var context = &Context{
		i_p2: 0,
		i_p1: 0,
	}
	_ = context
	r_mark_regions(env, context)
	env.LimitBackward = env.Cursor
	env.Cursor = env.Limit
	var v_2 = env.Limit - env.Cursor
	r_attached_pronoun(env, context)
	env.Cursor = env.Limit - v_2
	var v_3 = env.Limit - env.Cursor
lab0:
	for {
	lab1:
		for {
			var v_4 = env.Limit - env.Cursor
		lab2:
			for {
				if !r_standard_suffix(env, context) {
					break lab2
				}
				break lab1
			}
			env.Cursor = env.Limit - v_4
			if !r_verb_suffix(env, context) {
				break lab0
			}
			break lab1
		}
		break lab0
	}
	env.Cursor = env.Limit - v_3
	var v_5 = env.Limit - env.Cursor
	r_residual_suffix(env, context)
	env.Cursor = env.Limit - v_5
	env.Cursor = env.LimitBackward
	var v_6 = env.Cursor
	r_cleaning(env, context)
	env.Cursor = v_6
	return true
}
