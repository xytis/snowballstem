//! Generated by Snowball 2.0.0 - https://snowballstem.org/

package dutch

import (
	snowballRuntime "github.com/blevesearch/snowballstem"
)

var A_0 = []*snowballRuntime.Among{
	{Str: "", A: -1, B: 6, F: nil},
	{Str: "\u00E1", A: 0, B: 1, F: nil},
	{Str: "\u00E4", A: 0, B: 1, F: nil},
	{Str: "\u00E9", A: 0, B: 2, F: nil},
	{Str: "\u00EB", A: 0, B: 2, F: nil},
	{Str: "\u00ED", A: 0, B: 3, F: nil},
	{Str: "\u00EF", A: 0, B: 3, F: nil},
	{Str: "\u00F3", A: 0, B: 4, F: nil},
	{Str: "\u00F6", A: 0, B: 4, F: nil},
	{Str: "\u00FA", A: 0, B: 5, F: nil},
	{Str: "\u00FC", A: 0, B: 5, F: nil},
}

var A_1 = []*snowballRuntime.Among{
	{Str: "", A: -1, B: 3, F: nil},
	{Str: "I", A: 0, B: 2, F: nil},
	{Str: "Y", A: 0, B: 1, F: nil},
}

var A_2 = []*snowballRuntime.Among{
	{Str: "dd", A: -1, B: -1, F: nil},
	{Str: "kk", A: -1, B: -1, F: nil},
	{Str: "tt", A: -1, B: -1, F: nil},
}

var A_3 = []*snowballRuntime.Among{
	{Str: "ene", A: -1, B: 2, F: nil},
	{Str: "se", A: -1, B: 3, F: nil},
	{Str: "en", A: -1, B: 2, F: nil},
	{Str: "heden", A: 2, B: 1, F: nil},
	{Str: "s", A: -1, B: 3, F: nil},
}

var A_4 = []*snowballRuntime.Among{
	{Str: "end", A: -1, B: 1, F: nil},
	{Str: "ig", A: -1, B: 2, F: nil},
	{Str: "ing", A: -1, B: 1, F: nil},
	{Str: "lijk", A: -1, B: 3, F: nil},
	{Str: "baar", A: -1, B: 4, F: nil},
	{Str: "bar", A: -1, B: 5, F: nil},
}

var A_5 = []*snowballRuntime.Among{
	{Str: "aa", A: -1, B: -1, F: nil},
	{Str: "ee", A: -1, B: -1, F: nil},
	{Str: "oo", A: -1, B: -1, F: nil},
	{Str: "uu", A: -1, B: -1, F: nil},
}

var G_v = []byte{17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128}

var G_v_I = []byte{1, 0, 0, 17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128}

var G_v_j = []byte{17, 67, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128}

type Context struct {
	i_p2      int
	i_p1      int
	b_e_found bool
}

func r_prelude(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	var v_1 = env.Cursor
replab0:
	for {
		var v_2 = env.Cursor
	lab1:
		for range [2]struct{}{} {
			env.Bra = env.Cursor
			among_var = env.FindAmong(A_0, context)
			if among_var == 0 {
				break lab1
			}
			env.Ket = env.Cursor
			if among_var == 1 {
				if !env.SliceFrom("a") {
					return false
				}
			} else if among_var == 2 {
				if !env.SliceFrom("e") {
					return false
				}
			} else if among_var == 3 {
				if !env.SliceFrom("i") {
					return false
				}
			} else if among_var == 4 {
				if !env.SliceFrom("o") {
					return false
				}
			} else if among_var == 5 {
				if !env.SliceFrom("u") {
					return false
				}
			} else if among_var == 6 {
				if env.Cursor >= env.Limit {
					break lab1
				}
				env.NextChar()
			}
			continue replab0
		}
		env.Cursor = v_2
		break replab0
	}
	env.Cursor = v_1
	var v_3 = env.Cursor
lab2:
	for {
		env.Bra = env.Cursor
		if !env.EqS("y") {
			env.Cursor = v_3
			break lab2
		}
		env.Ket = env.Cursor
		if !env.SliceFrom("Y") {
			return false
		}
		break lab2
	}
replab3:
	for {
		var v_4 = env.Cursor
	lab4:
		for range [2]struct{}{} {
		golab5:
			for {
				var v_5 = env.Cursor
			lab6:
				for {
					if !env.InGrouping(G_v, 97, 232) {
						break lab6
					}
					env.Bra = env.Cursor
				lab7:
					for {
						var v_6 = env.Cursor
					lab8:
						for {
							if !env.EqS("i") {
								break lab8
							}
							env.Ket = env.Cursor
							if !env.InGrouping(G_v, 97, 232) {
								break lab8
							}
							if !env.SliceFrom("I") {
								return false
							}
							break lab7
						}
						env.Cursor = v_6
						if !env.EqS("y") {
							break lab6
						}
						env.Ket = env.Cursor
						if !env.SliceFrom("Y") {
							return false
						}
						break lab7
					}
					env.Cursor = v_5
					break golab5
				}
				env.Cursor = v_5
				if env.Cursor >= env.Limit {
					break lab4
				}
				env.NextChar()
			}
			continue replab3
		}
		env.Cursor = v_4
		break replab3
	}
	return true
}

func r_mark_regions(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	context.i_p1 = env.Limit
	context.i_p2 = env.Limit
golab0:
	for {
	lab1:
		for {
			if !env.InGrouping(G_v, 97, 232) {
				break lab1
			}
			break golab0
		}
		if env.Cursor >= env.Limit {
			return false
		}
		env.NextChar()
	}
golab2:
	for {
	lab3:
		for {
			if !env.OutGrouping(G_v, 97, 232) {
				break lab3
			}
			break golab2
		}
		if env.Cursor >= env.Limit {
			return false
		}
		env.NextChar()
	}
	context.i_p1 = env.Cursor
lab4:
	for {
		if !(context.i_p1 < 3) {
			break lab4
		}
		context.i_p1 = 3
		break lab4
	}
golab5:
	for {
	lab6:
		for {
			if !env.InGrouping(G_v, 97, 232) {
				break lab6
			}
			break golab5
		}
		if env.Cursor >= env.Limit {
			return false
		}
		env.NextChar()
	}
golab7:
	for {
	lab8:
		for {
			if !env.OutGrouping(G_v, 97, 232) {
				break lab8
			}
			break golab7
		}
		if env.Cursor >= env.Limit {
			return false
		}
		env.NextChar()
	}
	context.i_p2 = env.Cursor
	return true
}

func r_postlude(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
replab0:
	for {
		var v_1 = env.Cursor
	lab1:
		for range [2]struct{}{} {
			env.Bra = env.Cursor
			among_var = env.FindAmong(A_1, context)
			if among_var == 0 {
				break lab1
			}
			env.Ket = env.Cursor
			if among_var == 1 {
				if !env.SliceFrom("y") {
					return false
				}
			} else if among_var == 2 {
				if !env.SliceFrom("i") {
					return false
				}
			} else if among_var == 3 {
				if env.Cursor >= env.Limit {
					break lab1
				}
				env.NextChar()
			}
			continue replab0
		}
		env.Cursor = v_1
		break replab0
	}
	return true
}

func r_R1(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !(context.i_p1 <= env.Cursor) {
		return false
	}
	return true
}

func r_R2(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !(context.i_p2 <= env.Cursor) {
		return false
	}
	return true
}

func r_undouble(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var v_1 = env.Limit - env.Cursor
	if env.FindAmongB(A_2, context) == 0 {
		return false
	}
	env.Cursor = env.Limit - v_1
	env.Ket = env.Cursor
	if env.Cursor <= env.LimitBackward {
		return false
	}
	env.PrevChar()
	env.Bra = env.Cursor
	if !env.SliceDel() {
		return false
	}
	return true
}

func r_e_ending(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	context.b_e_found = false
	env.Ket = env.Cursor
	if !env.EqSB("e") {
		return false
	}
	env.Bra = env.Cursor
	if !r_R1(env, context) {
		return false
	}
	var v_1 = env.Limit - env.Cursor
	if !env.OutGroupingB(G_v, 97, 232) {
		return false
	}
	env.Cursor = env.Limit - v_1
	if !env.SliceDel() {
		return false
	}
	context.b_e_found = true
	if !r_undouble(env, context) {
		return false
	}
	return true
}

func r_en_ending(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	if !r_R1(env, context) {
		return false
	}
	var v_1 = env.Limit - env.Cursor
	if !env.OutGroupingB(G_v, 97, 232) {
		return false
	}
	env.Cursor = env.Limit - v_1
	var v_2 = env.Limit - env.Cursor
lab0:
	for {
		if !env.EqSB("gem") {
			break lab0
		}
		return false
	}
	env.Cursor = env.Limit - v_2
	if !env.SliceDel() {
		return false
	}
	if !r_undouble(env, context) {
		return false
	}
	return true
}

func r_standard_suffix(env *snowballRuntime.Env, ctx interface{}) bool {
	context := ctx.(*Context)
	_ = context
	var among_var int32
	var v_1 = env.Limit - env.Cursor
lab0:
	for {
		env.Ket = env.Cursor
		among_var = env.FindAmongB(A_3, context)
		if among_var == 0 {
			break lab0
		}
		env.Bra = env.Cursor
		if among_var == 1 {
			if !r_R1(env, context) {
				break lab0
			}
			if !env.SliceFrom("heid") {
				return false
			}
		} else if among_var == 2 {
			if !r_en_ending(env, context) {
				break lab0
			}
		} else if among_var == 3 {
			if !r_R1(env, context) {
				break lab0
			}
			if !env.OutGroupingB(G_v_j, 97, 232) {
				break lab0
			}
			if !env.SliceDel() {
				return false
			}
		}
		break lab0
	}
	env.Cursor = env.Limit - v_1
	var v_2 = env.Limit - env.Cursor
	r_e_ending(env, context)
	env.Cursor = env.Limit - v_2
	var v_3 = env.Limit - env.Cursor
lab1:
	for {
		env.Ket = env.Cursor
		if !env.EqSB("heid") {
			break lab1
		}
		env.Bra = env.Cursor
		if !r_R2(env, context) {
			break lab1
		}
		var v_4 = env.Limit - env.Cursor
	lab2:
		for {
			if !env.EqSB("c") {
				break lab2
			}
			break lab1
		}
		env.Cursor = env.Limit - v_4
		if !env.SliceDel() {
			return false
		}
		env.Ket = env.Cursor
		if !env.EqSB("en") {
			break lab1
		}
		env.Bra = env.Cursor
		if !r_en_ending(env, context) {
			break lab1
		}
		break lab1
	}
	env.Cursor = env.Limit - v_3
	var v_5 = env.Limit - env.Cursor
lab3:
	for {
		env.Ket = env.Cursor
		among_var = env.FindAmongB(A_4, context)
		if among_var == 0 {
			break lab3
		}
		env.Bra = env.Cursor
		if among_var == 1 {
			if !r_R2(env, context) {
				break lab3
			}
			if !env.SliceDel() {
				return false
			}
		lab4:
			for {
				var v_6 = env.Limit - env.Cursor
			lab5:
				for {
					env.Ket = env.Cursor
					if !env.EqSB("ig") {
						break lab5
					}
					env.Bra = env.Cursor
					if !r_R2(env, context) {
						break lab5
					}
					var v_7 = env.Limit - env.Cursor
				lab6:
					for {
						if !env.EqSB("e") {
							break lab6
						}
						break lab5
					}
					env.Cursor = env.Limit - v_7
					if !env.SliceDel() {
						return false
					}
					break lab4
				}
				env.Cursor = env.Limit - v_6
				if !r_undouble(env, context) {
					break lab3
				}
				break lab4
			}
		} else if among_var == 2 {
			if !r_R2(env, context) {
				break lab3
			}
			var v_8 = env.Limit - env.Cursor
		lab7:
			for {
				if !env.EqSB("e") {
					break lab7
				}
				break lab3
			}
			env.Cursor = env.Limit - v_8
			if !env.SliceDel() {
				return false
			}
		} else if among_var == 3 {
			if !r_R2(env, context) {
				break lab3
			}
			if !env.SliceDel() {
				return false
			}
			if !r_e_ending(env, context) {
				break lab3
			}
		} else if among_var == 4 {
			if !r_R2(env, context) {
				break lab3
			}
			if !env.SliceDel() {
				return false
			}
		} else if among_var == 5 {
			if !r_R2(env, context) {
				break lab3
			}
			if !context.b_e_found {
				break lab3
			}
			if !env.SliceDel() {
				return false
			}
		}
		break lab3
	}
	env.Cursor = env.Limit - v_5
	var v_9 = env.Limit - env.Cursor
lab8:
	for {
		if !env.OutGroupingB(G_v_I, 73, 232) {
			break lab8
		}
		var v_10 = env.Limit - env.Cursor
		if env.FindAmongB(A_5, context) == 0 {
			break lab8
		}
		if !env.OutGroupingB(G_v, 97, 232) {
			break lab8
		}
		env.Cursor = env.Limit - v_10
		env.Ket = env.Cursor
		if env.Cursor <= env.LimitBackward {
			break lab8
		}
		env.PrevChar()
		env.Bra = env.Cursor
		if !env.SliceDel() {
			return false
		}
		break lab8
	}
	env.Cursor = env.Limit - v_9
	return true
}

func Stem(env *snowballRuntime.Env) bool {
	var context = &Context{
		i_p2:      0,
		i_p1:      0,
		b_e_found: false,
	}
	_ = context
	var v_1 = env.Cursor
	r_prelude(env, context)
	env.Cursor = v_1
	var v_2 = env.Cursor
	r_mark_regions(env, context)
	env.Cursor = v_2
	env.LimitBackward = env.Cursor
	env.Cursor = env.Limit
	r_standard_suffix(env, context)
	env.Cursor = env.LimitBackward
	var v_4 = env.Cursor
	r_postlude(env, context)
	env.Cursor = v_4
	return true
}
